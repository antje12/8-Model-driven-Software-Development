/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslGeneratorTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;

  @Inject
  @Extension
  private ReflectExtensions _reflectExtensions;

  @Test
  public void simplestProgram() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system University");
      _builder.newLine();
      _builder.append("entity Person");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package university;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import java.util.*;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("public class Person {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private ExternalCode externalCode;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public Person(ExternalCode externalCode) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.externalCode = externalCode;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void workingTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system University");
      _builder.newLine();
      _builder.append("entity Person");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("attribute name as string");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package university;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import java.util.*;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("public class Person {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private ExternalCode externalCode;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private String name;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public Person(ExternalCode externalCode, String name) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.externalCode = externalCode;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.setName(name);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public String getName() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("return name;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public void setName(String name) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.name = name;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void multipleFile() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system University");
      _builder.newLine();
      _builder.append("entity Person");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("attribute name as string");
      _builder.newLine();
      _builder.append("entity Teacher");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("MULTIPLE FILES WERE GENERATED");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 1 : /myProject/./src-gen/university/Person.java");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("package university;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import java.util.*;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("public class Person {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private ExternalCode externalCode;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private String name;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public Person(ExternalCode externalCode, String name) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.externalCode = externalCode;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.setName(name);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public String getName() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("return name;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public void setName(String name) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.name = name;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 2 : /myProject/./src-gen/university/Teacher.java");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("package university;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import java.util.*;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("public class Teacher {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private ExternalCode externalCode;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public Teacher(ExternalCode externalCode, ) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("this.externalCode = externalCode;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void multipleFile2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system University");
      _builder.newLine();
      _builder.append("entity Person");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("attribute name as string");
      _builder.newLine();
      _builder.append("entity Teacher");
      _builder.newLine();
      final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("package university;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("import java.util.*;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("public class Person {");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("private ExternalCode externalCode;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("private String name;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("public Person(ExternalCode externalCode, String name) {");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("this.externalCode = externalCode;");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("this.setName(name);");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("public String getName() {");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("return name;");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("public void setName(String name) {");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("this.name = name;");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        Assertions.assertEquals(_builder_1, it.getAllGeneratedResources().get("/myProject/./src-gen/university/Person.java"));
      };
      this._compilationTestHelper.compile(_builder, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void metaprogramming1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system University");
      _builder.newLine();
      _builder.append("entity Person");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("attribute name as string");
      _builder.newLine();
      final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
        try {
          final Object person = it.getCompiledClass("university.Person").getDeclaredConstructor(String.class).newInstance("my name");
          Assertions.assertEquals("my name", this._reflectExtensions.invoke(person, "getName"));
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      this._compilationTestHelper.compile(_builder, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void mathExample1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("program Test");
      _builder.newLine();
      _builder.append("var x = 1 + 2");
      _builder.newLine();
      final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
        try {
          final Object mathExp = it.getCompiledClass("math_expression.Test").getDeclaredConstructor().newInstance();
          this._reflectExtensions.invoke(mathExp, "compute");
          Assertions.assertEquals(3, this._reflectExtensions.<Integer>get(mathExp, "x"));
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      this._compilationTestHelper.compile(_builder, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void mathExample2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("program Test");
      _builder.newLine();
      _builder.append("var x = 1 + 2");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("//code");
      _builder_1.newLine();
      _builder_1.append("public void compute() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.x = 1 + 2;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("//code");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
