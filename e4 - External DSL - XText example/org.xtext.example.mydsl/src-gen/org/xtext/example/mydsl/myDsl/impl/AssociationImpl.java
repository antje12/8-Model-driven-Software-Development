/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Association;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Association</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AssociationImpl#isManyFrom <em>Many From</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AssociationImpl#getFrom <em>From</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AssociationImpl#isManyTo <em>Many To</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AssociationImpl#getTo <em>To</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssociationImpl extends RelationImpl implements Association
{
  /**
   * The default value of the '{@link #isManyFrom() <em>Many From</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManyFrom()
   * @generated
   * @ordered
   */
  protected static final boolean MANY_FROM_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isManyFrom() <em>Many From</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManyFrom()
   * @generated
   * @ordered
   */
  protected boolean manyFrom = MANY_FROM_EDEFAULT;

  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected Entity from;

  /**
   * The default value of the '{@link #isManyTo() <em>Many To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManyTo()
   * @generated
   * @ordered
   */
  protected static final boolean MANY_TO_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isManyTo() <em>Many To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManyTo()
   * @generated
   * @ordered
   */
  protected boolean manyTo = MANY_TO_EDEFAULT;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected Entity to;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ASSOCIATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isManyFrom()
  {
    return manyFrom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setManyFrom(boolean newManyFrom)
  {
    boolean oldManyFrom = manyFrom;
    manyFrom = newManyFrom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSOCIATION__MANY_FROM, oldManyFrom, manyFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getFrom()
  {
    if (from != null && from.eIsProxy())
    {
      InternalEObject oldFrom = (InternalEObject)from;
      from = (Entity)eResolveProxy(oldFrom);
      if (from != oldFrom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.ASSOCIATION__FROM, oldFrom, from));
      }
    }
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom(Entity newFrom)
  {
    Entity oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSOCIATION__FROM, oldFrom, from));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isManyTo()
  {
    return manyTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setManyTo(boolean newManyTo)
  {
    boolean oldManyTo = manyTo;
    manyTo = newManyTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSOCIATION__MANY_TO, oldManyTo, manyTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getTo()
  {
    if (to != null && to.eIsProxy())
    {
      InternalEObject oldTo = (InternalEObject)to;
      to = (Entity)eResolveProxy(oldTo);
      if (to != oldTo)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.ASSOCIATION__TO, oldTo, to));
      }
    }
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(Entity newTo)
  {
    Entity oldTo = to;
    to = newTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSOCIATION__TO, oldTo, to));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSOCIATION__MANY_FROM:
        return isManyFrom();
      case MyDslPackage.ASSOCIATION__FROM:
        if (resolve) return getFrom();
        return basicGetFrom();
      case MyDslPackage.ASSOCIATION__MANY_TO:
        return isManyTo();
      case MyDslPackage.ASSOCIATION__TO:
        if (resolve) return getTo();
        return basicGetTo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSOCIATION__MANY_FROM:
        setManyFrom((Boolean)newValue);
        return;
      case MyDslPackage.ASSOCIATION__FROM:
        setFrom((Entity)newValue);
        return;
      case MyDslPackage.ASSOCIATION__MANY_TO:
        setManyTo((Boolean)newValue);
        return;
      case MyDslPackage.ASSOCIATION__TO:
        setTo((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSOCIATION__MANY_FROM:
        setManyFrom(MANY_FROM_EDEFAULT);
        return;
      case MyDslPackage.ASSOCIATION__FROM:
        setFrom((Entity)null);
        return;
      case MyDslPackage.ASSOCIATION__MANY_TO:
        setManyTo(MANY_TO_EDEFAULT);
        return;
      case MyDslPackage.ASSOCIATION__TO:
        setTo((Entity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSOCIATION__MANY_FROM:
        return manyFrom != MANY_FROM_EDEFAULT;
      case MyDslPackage.ASSOCIATION__FROM:
        return from != null;
      case MyDslPackage.ASSOCIATION__MANY_TO:
        return manyTo != MANY_TO_EDEFAULT;
      case MyDslPackage.ASSOCIATION__TO:
        return to != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (manyFrom: ");
    result.append(manyFrom);
    result.append(", manyTo: ");
    result.append(manyTo);
    result.append(')');
    return result.toString();
  }

} //AssociationImpl
