/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OtherRelation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Other Relation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.OtherRelationImpl#isSingleto <em>Singleto</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.OtherRelationImpl#isManyto <em>Manyto</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.OtherRelationImpl#getFrom <em>From</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.OtherRelationImpl#getTo <em>To</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OtherRelationImpl extends RelationImpl implements OtherRelation
{
  /**
   * The default value of the '{@link #isSingleto() <em>Singleto</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSingleto()
   * @generated
   * @ordered
   */
  protected static final boolean SINGLETO_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSingleto() <em>Singleto</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSingleto()
   * @generated
   * @ordered
   */
  protected boolean singleto = SINGLETO_EDEFAULT;

  /**
   * The default value of the '{@link #isManyto() <em>Manyto</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManyto()
   * @generated
   * @ordered
   */
  protected static final boolean MANYTO_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isManyto() <em>Manyto</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManyto()
   * @generated
   * @ordered
   */
  protected boolean manyto = MANYTO_EDEFAULT;

  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected Entity from;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected Entity to;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OtherRelationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.OTHER_RELATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSingleto()
  {
    return singleto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSingleto(boolean newSingleto)
  {
    boolean oldSingleto = singleto;
    singleto = newSingleto;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.OTHER_RELATION__SINGLETO, oldSingleto, singleto));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isManyto()
  {
    return manyto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setManyto(boolean newManyto)
  {
    boolean oldManyto = manyto;
    manyto = newManyto;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.OTHER_RELATION__MANYTO, oldManyto, manyto));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getFrom()
  {
    if (from != null && from.eIsProxy())
    {
      InternalEObject oldFrom = (InternalEObject)from;
      from = (Entity)eResolveProxy(oldFrom);
      if (from != oldFrom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.OTHER_RELATION__FROM, oldFrom, from));
      }
    }
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom(Entity newFrom)
  {
    Entity oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.OTHER_RELATION__FROM, oldFrom, from));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getTo()
  {
    if (to != null && to.eIsProxy())
    {
      InternalEObject oldTo = (InternalEObject)to;
      to = (Entity)eResolveProxy(oldTo);
      if (to != oldTo)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.OTHER_RELATION__TO, oldTo, to));
      }
    }
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(Entity newTo)
  {
    Entity oldTo = to;
    to = newTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.OTHER_RELATION__TO, oldTo, to));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.OTHER_RELATION__SINGLETO:
        return isSingleto();
      case MyDslPackage.OTHER_RELATION__MANYTO:
        return isManyto();
      case MyDslPackage.OTHER_RELATION__FROM:
        if (resolve) return getFrom();
        return basicGetFrom();
      case MyDslPackage.OTHER_RELATION__TO:
        if (resolve) return getTo();
        return basicGetTo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.OTHER_RELATION__SINGLETO:
        setSingleto((Boolean)newValue);
        return;
      case MyDslPackage.OTHER_RELATION__MANYTO:
        setManyto((Boolean)newValue);
        return;
      case MyDslPackage.OTHER_RELATION__FROM:
        setFrom((Entity)newValue);
        return;
      case MyDslPackage.OTHER_RELATION__TO:
        setTo((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.OTHER_RELATION__SINGLETO:
        setSingleto(SINGLETO_EDEFAULT);
        return;
      case MyDslPackage.OTHER_RELATION__MANYTO:
        setManyto(MANYTO_EDEFAULT);
        return;
      case MyDslPackage.OTHER_RELATION__FROM:
        setFrom((Entity)null);
        return;
      case MyDslPackage.OTHER_RELATION__TO:
        setTo((Entity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.OTHER_RELATION__SINGLETO:
        return singleto != SINGLETO_EDEFAULT;
      case MyDslPackage.OTHER_RELATION__MANYTO:
        return manyto != MANYTO_EDEFAULT;
      case MyDslPackage.OTHER_RELATION__FROM:
        return from != null;
      case MyDslPackage.OTHER_RELATION__TO:
        return to != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (singleto: ");
    result.append(singleto);
    result.append(", manyto: ");
    result.append(manyto);
    result.append(')');
    return result.toString();
  }

} //OtherRelationImpl
