/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.Attribute;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.Inheritance;
import org.xtext.example.mydsl.myDsl.Require;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      boolean _matched = false;
      if (context instanceof Require) {
        _matched=true;
        return this.getScope(((Require)context));
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }

  public IScope getScope(final Require require) {
    IScope _xblockexpression = null;
    {
      final Entity entity = EcoreUtil2.<Entity>getContainerOfType(require, Entity.class);
      _xblockexpression = Scopes.scopeFor(Iterables.<Attribute>filter(entity.getElements(), Attribute.class), this.recursiveScope(entity));
    }
    return _xblockexpression;
  }

  public IScope recursiveScope(final Entity entity) {
    final Entity superEntity = this.superEntity(entity);
    if ((superEntity == null)) {
      return IScope.NULLSCOPE;
    }
    return Scopes.scopeFor(Iterables.<Attribute>filter(superEntity.getElements(), Attribute.class), this.recursiveScope(superEntity));
  }

  public Entity superEntity(final Entity entity) {
    final org.xtext.example.mydsl.myDsl.System system = EcoreUtil2.<org.xtext.example.mydsl.myDsl.System>getContainerOfType(entity, org.xtext.example.mydsl.myDsl.System.class);
    final Iterable<Inheritance> relations = Iterables.<Inheritance>filter(system.getElements(), Inheritance.class);
    final Function1<Inheritance, Boolean> _function = (Inheritance it) -> {
      Entity _baseEntity = it.getBaseEntity();
      return Boolean.valueOf(Objects.equal(_baseEntity, entity));
    };
    final Inheritance inheritanceRelation = IterableExtensions.<Inheritance>findFirst(relations, _function);
    if ((inheritanceRelation == null)) {
      return null;
    }
    return inheritanceRelation.getSuperEntity();
  }
}
