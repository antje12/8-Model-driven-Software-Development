/*
 * generated by Xtext 2.29.0
 */
package org.xtext.ui23.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UI23Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.UI23");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Assignment cFormsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormsFormParserRuleCall_3_0 = (RuleCall)cFormsAssignment_3.eContents().get(0);
		
		//UI23:
		//    'title' name=ID functions+=Function* forms+=Form*;
		@Override public ParserRule getRule() { return rule; }
		
		//'title' name=ID functions+=Function* forms+=Form*
		public Group getGroup() { return cGroup; }
		
		//'title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0() { return cFunctionsFunctionParserRuleCall_2_0; }
		
		//forms+=Form*
		public Assignment getFormsAssignment_3() { return cFormsAssignment_3; }
		
		//Form
		public RuleCall getFormsFormParserRuleCall_3_0() { return cFormsFormParserRuleCall_3_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_1_0 = (RuleCall)cTypesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeTypeParserRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		
		//Function:
		//    'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' returnType=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' returnType=Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(types+=Type (',' types+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0_0() { return cTypesTypeParserRuleCall_3_0_0; }
		
		//(',' types+=Type)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_1_1() { return cTypesAssignment_3_1_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_1_0() { return cTypesTypeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_6_0() { return cReturnTypeTypeParserRuleCall_6_0; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Form:
		//    'form' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		//    '{' layout=Layout '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'form' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		//'{' layout=Layout '}'
		public Group getGroup() { return cGroup; }
		
		//'form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0_0() { return cParametersParameterParserRuleCall_2_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_4_0() { return cLayoutLayoutParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAxisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAxisAlternatives_1_0 = (Alternatives)cAxisAssignment_1.eContents().get(0);
		private final Keyword cAxisRowKeyword_1_0_0 = (Keyword)cAxisAlternatives_1_0.eContents().get(0);
		private final Keyword cAxisColumnKeyword_1_0_1 = (Keyword)cAxisAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentsComponentParserRuleCall_3_0 = (RuleCall)cComponentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Layout:
		//    {Layout} axis=('row' | 'column') '{' components+=Component* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Layout} axis=('row' | 'column') '{' components+=Component* '}'
		public Group getGroup() { return cGroup; }
		
		//{Layout}
		public Action getLayoutAction_0() { return cLayoutAction_0; }
		
		//axis=('row' | 'column')
		public Assignment getAxisAssignment_1() { return cAxisAssignment_1; }
		
		//('row' | 'column')
		public Alternatives getAxisAlternatives_1_0() { return cAxisAlternatives_1_0; }
		
		//'row'
		public Keyword getAxisRowKeyword_1_0_0() { return cAxisRowKeyword_1_0_0; }
		
		//'column'
		public Keyword getAxisColumnKeyword_1_0_1() { return cAxisColumnKeyword_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_3_0() { return cComponentsComponentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Component:
		//    Layout | Element | FormUse;
		@Override public ParserRule getRule() { return rule; }
		
		//Layout | Element | FormUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Layout
		public RuleCall getLayoutParserRuleCall_0() { return cLayoutParserRuleCall_0; }
		
		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
		
		//FormUse
		public RuleCall getFormUseParserRuleCall_2() { return cFormUseParserRuleCall_2; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//    Label | InputText | Button;
		@Override public ParserRule getRule() { return rule; }
		
		//Label | InputText | Button
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//InputText
		public RuleCall getInputTextParserRuleCall_1() { return cInputTextParserRuleCall_1; }
		
		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Label:
		//    'label' ':' exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class InputTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.InputText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//InputText:
		//    'input' name=ID ':' exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=ID ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_0() { return cExpExpParserRuleCall_3_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValidateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValidateAsteriskKeyword_1_0 = (Keyword)cValidateAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExpParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		
		//Button:
		//    'button' validate='*'? name=ID ':' exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' validate='*'? name=ID ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//validate='*'?
		public Assignment getValidateAssignment_1() { return cValidateAssignment_1; }
		
		//'*'
		public Keyword getValidateAsteriskKeyword_1_0() { return cValidateAsteriskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//exp=Exp
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_4_0() { return cExpExpParserRuleCall_4_0; }
	}
	public class FormUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.FormUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFormFormCrossReference_0_0 = (CrossReference)cFormAssignment_0.eContents().get(0);
		private final RuleCall cFormFormIDTerminalRuleCall_0_0_1 = (RuleCall)cFormFormCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpsExpParserRuleCall_2_0_0 = (RuleCall)cExpsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpsExpParserRuleCall_2_1_1_0 = (RuleCall)cExpsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormUse:
		//    form=[Form] '(' (exps+=Exp (',' exps+=Exp)*)?')';
		@Override public ParserRule getRule() { return rule; }
		
		//form=[Form] '(' (exps+=Exp (',' exps+=Exp)*)?')'
		public Group getGroup() { return cGroup; }
		
		//form=[Form]
		public Assignment getFormAssignment_0() { return cFormAssignment_0; }
		
		//[Form]
		public CrossReference getFormFormCrossReference_0_0() { return cFormFormCrossReference_0_0; }
		
		//ID
		public RuleCall getFormFormIDTerminalRuleCall_0_0_1() { return cFormFormIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(exps+=Exp (',' exps+=Exp)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//exps+=Exp
		public Assignment getExpsAssignment_2_0() { return cExpsAssignment_2_0; }
		
		//Exp
		public RuleCall getExpsExpParserRuleCall_2_0_0() { return cExpsExpParserRuleCall_2_0_0; }
		
		//(',' exps+=Exp)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//exps+=Exp
		public Assignment getExpsAssignment_2_1_1() { return cExpsAssignment_2_1_1; }
		
		//Exp
		public RuleCall getExpsExpParserRuleCall_2_1_1_0() { return cExpsExpParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//    'boolean' | 'string' | 'number';
		@Override public ParserRule getRule() { return rule; }
		
		//'boolean' | 'string' | 'number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'number'
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Exp");
		private final RuleCall cBooleanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp:
		//    Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall() { return cBooleanParserRuleCall; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Boolean returns Exp:
		//    Equal ({Boolean.left=current} op=('&&' | '||') right=Equal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equal ({Boolean.left=current} op=('&&' | '||') right=Equal)*
		public Group getGroup() { return cGroup; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_0() { return cEqualParserRuleCall_0; }
		
		//({Boolean.left=current} op=('&&' | '||') right=Equal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Boolean.left=current}
		public Action getBooleanLeftAction_1_0() { return cBooleanLeftAction_1_0; }
		
		//op=('&&' | '||')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('&&' | '||')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0() { return cOpAmpersandAmpersandKeyword_1_1_0_0; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_1() { return cOpVerticalLineVerticalLineKeyword_1_1_0_1; }
		
		//right=Equal
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equal
		public RuleCall getRightEqualParserRuleCall_1_2_0() { return cRightEqualParserRuleCall_1_2_0; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompareParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equal returns Exp:
		//    Compare ({Equal.left=current} op=('==' | '!=') right=Compare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Compare ({Equal.left=current} op=('==' | '!=') right=Compare)*
		public Group getGroup() { return cGroup; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_0() { return cCompareParserRuleCall_0; }
		
		//({Equal.left=current} op=('==' | '!=') right=Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equal.left=current}
		public Action getEqualLeftAction_1_0() { return cEqualLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Compare
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Compare
		public RuleCall getRightCompareParserRuleCall_1_2_0() { return cRightCompareParserRuleCall_1_2_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompareLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConcatParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Compare returns Exp:
		//    Concat ({Compare.left=current} op=('<' | '>' | '<=' | '>=') right=Concat)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Concat ({Compare.left=current} op=('<' | '>' | '<=' | '>=') right=Concat)*
		public Group getGroup() { return cGroup; }
		
		//Concat
		public RuleCall getConcatParserRuleCall_0() { return cConcatParserRuleCall_0; }
		
		//({Compare.left=current} op=('<' | '>' | '<=' | '>=') right=Concat)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Compare.left=current}
		public Action getCompareLeftAction_1_0() { return cCompareLeftAction_1_0; }
		
		//op=('<' | '>' | '<=' | '>=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<' | '>' | '<=' | '>=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=Concat
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Concat
		public RuleCall getRightConcatParserRuleCall_1_2_0() { return cRightConcatParserRuleCall_1_2_0; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConcatLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Concat returns Exp:
		//    PlusMinus ({Concat.left=current} '&' right=PlusMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusMinus ({Concat.left=current} '&' right=PlusMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_0() { return cPlusMinusParserRuleCall_0; }
		
		//({Concat.left=current} '&' right=PlusMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Concat.left=current}
		public Action getConcatLeftAction_1_0() { return cConcatLeftAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=PlusMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusMinus
		public RuleCall getRightPlusMinusParserRuleCall_1_2_0() { return cRightPlusMinusParserRuleCall_1_2_0; }
	}
	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusMinusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusMinus returns Exp:
		//    MultDiv ({PlusMinus.left=current} op=('+' | '-') right=MultDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultDiv ({PlusMinus.left=current} op=('+' | '-') right=MultDiv)*
		public Group getGroup() { return cGroup; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_0() { return cMultDivParserRuleCall_0; }
		
		//({PlusMinus.left=current} op=('+' | '-') right=MultDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusMinus.left=current}
		public Action getPlusMinusLeftAction_1_0() { return cPlusMinusLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MultDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultDiv
		public RuleCall getRightMultDivParserRuleCall_1_2_0() { return cRightMultDivParserRuleCall_1_2_0; }
	}
	public class MultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.MultDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimitiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultDiv returns Exp:
		//    Primitive ({MultDiv.left=current} op=('*' | '/') right=Primitive)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive ({MultDiv.left=current} op=('*' | '/') right=Primitive)*
		public Group getGroup() { return cGroup; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//({MultDiv.left=current} op=('*' | '/') right=Primitive)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultDiv.left=current}
		public Action getMultDivLeftAction_1_0() { return cMultDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primitive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primitive
		public RuleCall getRightPrimitiveParserRuleCall_1_2_0() { return cRightPrimitiveParserRuleCall_1_2_0; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpPrimitiveParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLengthAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cNumberSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpPrimitiveParserRuleCall_3_2_0 = (RuleCall)cExpAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cTypeConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVarRefAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cRefAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefCrossRefCrossReference_5_1_0 = (CrossReference)cRefAssignment_5_1.eContents().get(0);
		private final RuleCall cRefCrossRefIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefCrossRefCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cFuncCallAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cRefAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRefFunctionCrossReference_6_1_0 = (CrossReference)cRefAssignment_6_1.eContents().get(0);
		private final RuleCall cRefFunctionIDTerminalRuleCall_6_1_0_1 = (RuleCall)cRefFunctionCrossReference_6_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Assignment cExpsAssignment_6_3_0 = (Assignment)cGroup_6_3.eContents().get(0);
		private final RuleCall cExpsExpParserRuleCall_6_3_0_0 = (RuleCall)cExpsAssignment_6_3_0.eContents().get(0);
		private final Group cGroup_6_3_1 = (Group)cGroup_6_3.eContents().get(1);
		private final Keyword cCommaKeyword_6_3_1_0 = (Keyword)cGroup_6_3_1.eContents().get(0);
		private final Assignment cExpsAssignment_6_3_1_1 = (Assignment)cGroup_6_3_1.eContents().get(1);
		private final RuleCall cExpsExpParserRuleCall_6_3_1_1_0 = (RuleCall)cExpsAssignment_6_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cParenthesisAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cExpAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_7_2_0 = (RuleCall)cExpAssignment_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Primitive returns Exp:
		//    {IntConstant} value=INT |
		//    {StringConstant} value=STRING |
		//    {Not} '!' exp=Primitive |
		//    {Length} '#' exp=Primitive |
		//    {TypeConstant} type=Type |
		//    {VarRef} ref=[CrossRef] |
		//    {FuncCall} ref=[Function] '(' (exps+=Exp (',' exps+=Exp)*)?')' |
		//    {Parenthesis} '(' exp=Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT |
		//{StringConstant} value=STRING |
		//{Not} '!' exp=Primitive |
		//{Length} '#' exp=Primitive |
		//{TypeConstant} type=Type |
		//{VarRef} ref=[CrossRef] |
		//{FuncCall} ref=[Function] '(' (exps+=Exp (',' exps+=Exp)*)?')' |
		//{Parenthesis} '(' exp=Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{Not} '!' exp=Primitive
		public Group getGroup_2() { return cGroup_2; }
		
		//{Not}
		public Action getNotAction_2_0() { return cNotAction_2_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }
		
		//exp=Primitive
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }
		
		//Primitive
		public RuleCall getExpPrimitiveParserRuleCall_2_2_0() { return cExpPrimitiveParserRuleCall_2_2_0; }
		
		//{Length} '#' exp=Primitive
		public Group getGroup_3() { return cGroup_3; }
		
		//{Length}
		public Action getLengthAction_3_0() { return cLengthAction_3_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_1() { return cNumberSignKeyword_3_1; }
		
		//exp=Primitive
		public Assignment getExpAssignment_3_2() { return cExpAssignment_3_2; }
		
		//Primitive
		public RuleCall getExpPrimitiveParserRuleCall_3_2_0() { return cExpPrimitiveParserRuleCall_3_2_0; }
		
		//{TypeConstant} type=Type
		public Group getGroup_4() { return cGroup_4; }
		
		//{TypeConstant}
		public Action getTypeConstantAction_4_0() { return cTypeConstantAction_4_0; }
		
		//type=Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_1_0() { return cTypeTypeParserRuleCall_4_1_0; }
		
		//{VarRef} ref=[CrossRef]
		public Group getGroup_5() { return cGroup_5; }
		
		//{VarRef}
		public Action getVarRefAction_5_0() { return cVarRefAction_5_0; }
		
		//ref=[CrossRef]
		public Assignment getRefAssignment_5_1() { return cRefAssignment_5_1; }
		
		//[CrossRef]
		public CrossReference getRefCrossRefCrossReference_5_1_0() { return cRefCrossRefCrossReference_5_1_0; }
		
		//ID
		public RuleCall getRefCrossRefIDTerminalRuleCall_5_1_0_1() { return cRefCrossRefIDTerminalRuleCall_5_1_0_1; }
		
		//{FuncCall} ref=[Function] '(' (exps+=Exp (',' exps+=Exp)*)?')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{FuncCall}
		public Action getFuncCallAction_6_0() { return cFuncCallAction_6_0; }
		
		//ref=[Function]
		public Assignment getRefAssignment_6_1() { return cRefAssignment_6_1; }
		
		//[Function]
		public CrossReference getRefFunctionCrossReference_6_1_0() { return cRefFunctionCrossReference_6_1_0; }
		
		//ID
		public RuleCall getRefFunctionIDTerminalRuleCall_6_1_0_1() { return cRefFunctionIDTerminalRuleCall_6_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//(exps+=Exp (',' exps+=Exp)*)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//exps+=Exp
		public Assignment getExpsAssignment_6_3_0() { return cExpsAssignment_6_3_0; }
		
		//Exp
		public RuleCall getExpsExpParserRuleCall_6_3_0_0() { return cExpsExpParserRuleCall_6_3_0_0; }
		
		//(',' exps+=Exp)*
		public Group getGroup_6_3_1() { return cGroup_6_3_1; }
		
		//','
		public Keyword getCommaKeyword_6_3_1_0() { return cCommaKeyword_6_3_1_0; }
		
		//exps+=Exp
		public Assignment getExpsAssignment_6_3_1_1() { return cExpsAssignment_6_3_1_1; }
		
		//Exp
		public RuleCall getExpsExpParserRuleCall_6_3_1_1_0() { return cExpsExpParserRuleCall_6_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//{Parenthesis} '(' exp=Exp ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Parenthesis}
		public Action getParenthesisAction_7_0() { return cParenthesisAction_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_7_2() { return cExpAssignment_7_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_7_2_0() { return cExpExpParserRuleCall_7_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
	}
	public class CrossRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ui23.Dsl.CrossRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CrossRef:
		//    InputText | Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//InputText | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InputText
		public RuleCall getInputTextParserRuleCall_0() { return cInputTextParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	
	
	private final UI23Elements pUI23;
	private final FunctionElements pFunction;
	private final FormElements pForm;
	private final LayoutElements pLayout;
	private final ComponentElements pComponent;
	private final ElementElements pElement;
	private final LabelElements pLabel;
	private final InputTextElements pInputText;
	private final ButtonElements pButton;
	private final FormUseElements pFormUse;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final ExpElements pExp;
	private final BooleanElements pBoolean;
	private final EqualElements pEqual;
	private final CompareElements pCompare;
	private final ConcatElements pConcat;
	private final PlusMinusElements pPlusMinus;
	private final MultDivElements pMultDiv;
	private final PrimitiveElements pPrimitive;
	private final CrossRefElements pCrossRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUI23 = new UI23Elements();
		this.pFunction = new FunctionElements();
		this.pForm = new FormElements();
		this.pLayout = new LayoutElements();
		this.pComponent = new ComponentElements();
		this.pElement = new ElementElements();
		this.pLabel = new LabelElements();
		this.pInputText = new InputTextElements();
		this.pButton = new ButtonElements();
		this.pFormUse = new FormUseElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pExp = new ExpElements();
		this.pBoolean = new BooleanElements();
		this.pEqual = new EqualElements();
		this.pCompare = new CompareElements();
		this.pConcat = new ConcatElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pMultDiv = new MultDivElements();
		this.pPrimitive = new PrimitiveElements();
		this.pCrossRef = new CrossRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ui23.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UI23:
	//    'title' name=ID functions+=Function* forms+=Form*;
	public UI23Elements getUI23Access() {
		return pUI23;
	}
	
	public ParserRule getUI23Rule() {
		return getUI23Access().getRule();
	}
	
	//Function:
	//    'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' returnType=Type;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Form:
	//    'form' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)?')')?
	//    '{' layout=Layout '}';
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//Layout:
	//    {Layout} axis=('row' | 'column') '{' components+=Component* '}';
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Component:
	//    Layout | Element | FormUse;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Element:
	//    Label | InputText | Button;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Label:
	//    'label' ':' exp=Exp;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//InputText:
	//    'input' name=ID ':' exp=Exp;
	public InputTextElements getInputTextAccess() {
		return pInputText;
	}
	
	public ParserRule getInputTextRule() {
		return getInputTextAccess().getRule();
	}
	
	//Button:
	//    'button' validate='*'? name=ID ':' exp=Exp;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//FormUse:
	//    form=[Form] '(' (exps+=Exp (',' exps+=Exp)*)?')';
	public FormUseElements getFormUseAccess() {
		return pFormUse;
	}
	
	public ParserRule getFormUseRule() {
		return getFormUseAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=Type;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Type:
	//    'boolean' | 'string' | 'number';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Exp:
	//    Boolean;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Boolean returns Exp:
	//    Equal ({Boolean.left=current} op=('&&' | '||') right=Equal)*;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Equal returns Exp:
	//    Compare ({Equal.left=current} op=('==' | '!=') right=Compare)*;
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Compare returns Exp:
	//    Concat ({Compare.left=current} op=('<' | '>' | '<=' | '>=') right=Concat)*;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Concat returns Exp:
	//    PlusMinus ({Concat.left=current} '&' right=PlusMinus)*;
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//PlusMinus returns Exp:
	//    MultDiv ({PlusMinus.left=current} op=('+' | '-') right=MultDiv)*;
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}
	
	//MultDiv returns Exp:
	//    Primitive ({MultDiv.left=current} op=('*' | '/') right=Primitive)*;
	public MultDivElements getMultDivAccess() {
		return pMultDiv;
	}
	
	public ParserRule getMultDivRule() {
		return getMultDivAccess().getRule();
	}
	
	//Primitive returns Exp:
	//    {IntConstant} value=INT |
	//    {StringConstant} value=STRING |
	//    {Not} '!' exp=Primitive |
	//    {Length} '#' exp=Primitive |
	//    {TypeConstant} type=Type |
	//    {VarRef} ref=[CrossRef] |
	//    {FuncCall} ref=[Function] '(' (exps+=Exp (',' exps+=Exp)*)?')' |
	//    {Parenthesis} '(' exp=Exp ')';
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//CrossRef:
	//    InputText | Parameter;
	public CrossRefElements getCrossRefAccess() {
		return pCrossRef;
	}
	
	public ParserRule getCrossRefRule() {
		return getCrossRefAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
