/*
 * generated by Xtext 2.29.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.MathExp");
		private final Assignment cVariablesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_0 = (RuleCall)cVariablesAssignment.eContents().get(0);
		
		//MathExp:
		//    variables+=Variable*;
		@Override public ParserRule getRule() { return rule; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment() { return cVariablesAssignment; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_0() { return cVariablesVariableParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//    Variable | Let
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | Let
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//Let
		public RuleCall getLetParserRuleCall_1() { return cLetParserRuleCall_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Variable returns Declaration:
		//    {Var} 'var' name=ID '=' value=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} 'var' name=ID '=' value=Exp
		public Group getGroup() { return cGroup; }
		
		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }
		
		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Exp
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Exp
		public RuleCall getValueExpParserRuleCall_4_0() { return cValueExpParserRuleCall_4_0; }
	}
	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInExpParserRuleCall_6_0 = (RuleCall)cInAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Let returns Declaration:
		//    {Let} 'let' name=ID '=' value=Exp 'in' in=Exp 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Let} 'let' name=ID '=' value=Exp 'in' in=Exp 'end'
		public Group getGroup() { return cGroup; }
		
		//{Let}
		public Action getLetAction_0() { return cLetAction_0; }
		
		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Exp
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Exp
		public RuleCall getValueExpParserRuleCall_4_0() { return cValueExpParserRuleCall_4_0; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//in=Exp
		public Assignment getInAssignment_6() { return cInAssignment_6; }
		
		//Exp
		public RuleCall getInExpParserRuleCall_6_0() { return cInExpParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Exp");
		private final RuleCall cPlusMinusParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp:
		//    PlusMinus;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall() { return cPlusMinusParserRuleCall; }
	}
	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusMinusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOpPlusMinusParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusMinus returns Exp:
		//    MultDiv ({PlusMinus.left=current} operator=OpPlusMinus right=MultDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultDiv ({PlusMinus.left=current} operator=OpPlusMinus right=MultDiv)*
		public Group getGroup() { return cGroup; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_0() { return cMultDivParserRuleCall_0; }
		
		//({PlusMinus.left=current} operator=OpPlusMinus right=MultDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusMinus.left=current}
		public Action getPlusMinusLeftAction_1_0() { return cPlusMinusLeftAction_1_0; }
		
		//operator=OpPlusMinus
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OpPlusMinus
		public RuleCall getOperatorOpPlusMinusParserRuleCall_1_1_0() { return cOperatorOpPlusMinusParserRuleCall_1_1_0; }
		
		//right=MultDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultDiv
		public RuleCall getRightMultDivParserRuleCall_1_2_0() { return cRightMultDivParserRuleCall_1_2_0; }
	}
	public class MultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.MultDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOpMultDivParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultDiv returns Exp:
		//    Primary ({MultDiv.left=current} operator=OpMultDiv right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MultDiv.left=current} operator=OpMultDiv right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MultDiv.left=current} operator=OpMultDiv right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultDiv.left=current}
		public Action getMultDivLeftAction_1_0() { return cMultDivLeftAction_1_0; }
		
		//operator=OpMultDiv
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OpMultDiv
		public RuleCall getOperatorOpMultDivParserRuleCall_1_1_0() { return cOperatorOpMultDivParserRuleCall_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableUseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns Exp:
		//    Parenthesis | Number | Let | VariableUse;
		@Override public ParserRule getRule() { return rule; }
		
		//Parenthesis | Number | Let | VariableUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_0() { return cParenthesisParserRuleCall_0; }
		
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
		
		//Let
		public RuleCall getLetParserRuleCall_2() { return cLetParserRuleCall_2; }
		
		//VariableUse
		public RuleCall getVariableUseParserRuleCall_3() { return cVariableUseParserRuleCall_3; }
	}
	public class OpPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.OpPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPlusAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpPlusMinus:
		//    {Plus} '+' | {Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+' | {Minus} '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Plus} '+'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Plus}
		public Action getPlusAction_0_0() { return cPlusAction_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//{Minus} '-'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minus}
		public Action getMinusAction_1_0() { return cMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}
	public class OpMultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.OpMultDiv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMultAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDivAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpMultDiv:
		//    {Mult} '*' | {Div} '/';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mult} '*' | {Div} '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Mult} '*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Mult}
		public Action getMultAction_0_0() { return cMultAction_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{Div} '/'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Div}
		public Action getDivAction_1_0() { return cDivAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number:
		//    {Number} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Number}
		public Action getNumberAction_0() { return cNumberAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parenthesis:
		//    {Parenthesis} '(' exp=Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' exp=Exp ')'
		public Group getGroup() { return cGroup; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0() { return cParenthesisAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.VariableUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefDeclarationCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cRefDeclarationCrossReference_1_0.eContents().get(1);
		
		//VariableUse:
		//    {VariableUse} ref=[Declaration];
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableUse} ref=[Declaration]
		public Group getGroup() { return cGroup; }
		
		//{VariableUse}
		public Action getVariableUseAction_0() { return cVariableUseAction_0; }
		
		//ref=[Declaration]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_1_0() { return cRefDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_1_0_1() { return cRefDeclarationIDTerminalRuleCall_1_0_1; }
	}
	
	
	private final MathExpElements pMathExp;
	private final DeclarationElements pDeclaration;
	private final VariableElements pVariable;
	private final LetElements pLet;
	private final ExpElements pExp;
	private final PlusMinusElements pPlusMinus;
	private final MultDivElements pMultDiv;
	private final PrimaryElements pPrimary;
	private final OpPlusMinusElements pOpPlusMinus;
	private final OpMultDivElements pOpMultDiv;
	private final NumberElements pNumber;
	private final ParenthesisElements pParenthesis;
	private final VariableUseElements pVariableUse;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMathExp = new MathExpElements();
		this.pDeclaration = new DeclarationElements();
		this.pVariable = new VariableElements();
		this.pLet = new LetElements();
		this.pExp = new ExpElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pMultDiv = new MultDivElements();
		this.pPrimary = new PrimaryElements();
		this.pOpPlusMinus = new OpPlusMinusElements();
		this.pOpMultDiv = new OpMultDivElements();
		this.pNumber = new NumberElements();
		this.pParenthesis = new ParenthesisElements();
		this.pVariableUse = new VariableUseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.Math".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MathExp:
	//    variables+=Variable*;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//Declaration:
	//    Variable | Let
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Variable returns Declaration:
	//    {Var} 'var' name=ID '=' value=Exp;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Let returns Declaration:
	//    {Let} 'let' name=ID '=' value=Exp 'in' in=Exp 'end';
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}
	
	//Exp:
	//    PlusMinus;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//PlusMinus returns Exp:
	//    MultDiv ({PlusMinus.left=current} operator=OpPlusMinus right=MultDiv)*;
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}
	
	//MultDiv returns Exp:
	//    Primary ({MultDiv.left=current} operator=OpMultDiv right=Primary)*;
	public MultDivElements getMultDivAccess() {
		return pMultDiv;
	}
	
	public ParserRule getMultDivRule() {
		return getMultDivAccess().getRule();
	}
	
	//Primary returns Exp:
	//    Parenthesis | Number | Let | VariableUse;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//OpPlusMinus:
	//    {Plus} '+' | {Minus} '-';
	public OpPlusMinusElements getOpPlusMinusAccess() {
		return pOpPlusMinus;
	}
	
	public ParserRule getOpPlusMinusRule() {
		return getOpPlusMinusAccess().getRule();
	}
	
	//OpMultDiv:
	//    {Mult} '*' | {Div} '/';
	public OpMultDivElements getOpMultDivAccess() {
		return pOpMultDiv;
	}
	
	public ParserRule getOpMultDivRule() {
		return getOpMultDivAccess().getRule();
	}
	
	//Number:
	//    {Number} value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Parenthesis:
	//    {Parenthesis} '(' exp=Exp ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//VariableUse:
	//    {VariableUse} ref=[Declaration];
	public VariableUseElements getVariableUseAccess() {
		return pVariableUse;
	}
	
	public ParserRule getVariableUseRule() {
		return getVariableUseAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
