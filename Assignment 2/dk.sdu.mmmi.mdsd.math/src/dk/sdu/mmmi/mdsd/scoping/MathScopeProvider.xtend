/*
  * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.math.Declaration
import dk.sdu.mmmi.mdsd.math.VariableUse
import dk.sdu.mmmi.mdsd.math.Let
import dk.sdu.mmmi.mdsd.math.MathExp
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathScopeProvider extends AbstractMathScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		switch (context) {
			VariableUse: return getScope(context, true)
		}
		return super.getScope(context, reference)
	}

	def IScope getScope(EObject context, boolean first) {		
		val container = first ? 
			EcoreUtil2.getContainerOfType(context, Declaration) : 
			EcoreUtil2.getContainerOfType(context.eContainer, Declaration);

		if (container instanceof Let) {
			return Scopes.scopeFor(#[container], getScope(container, false));
		} else {
			val root = EcoreUtil2.getRootContainer(container) as MathExp;
			val globalVariables = root.variables.filter[it.name !== container.name].toList;
			return Scopes.scopeFor(globalVariables)
		}
	}

}
