/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import dk.sdu.mmmi.mdsd.math.Declaration;
import dk.sdu.mmmi.mdsd.math.Let;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _matched = false;
    if (context instanceof VariableUse) {
      _matched=true;
      return this.getScope(context, true);
    }
    return super.getScope(context, reference);
  }

  public IScope getScope(final EObject context, final boolean first) {
    Declaration _xifexpression = null;
    if (first) {
      _xifexpression = EcoreUtil2.<Declaration>getContainerOfType(context, Declaration.class);
    } else {
      _xifexpression = EcoreUtil2.<Declaration>getContainerOfType(context.eContainer(), Declaration.class);
    }
    final Declaration container = _xifexpression;
    if ((container instanceof Let)) {
      return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(container)), this.getScope(container, false));
    } else {
      EObject _rootContainer = EcoreUtil2.getRootContainer(container);
      final MathExp root = ((MathExp) _rootContainer);
      final Function1<Declaration, Boolean> _function = (Declaration it) -> {
        String _name = it.getName();
        String _name_1 = container.getName();
        return Boolean.valueOf((_name != _name_1));
      };
      final List<Declaration> globalVariables = IterableExtensions.<Declaration>toList(IterableExtensions.<Declaration>filter(root.getVariables(), _function));
      return Scopes.scopeFor(globalVariables);
    }
  }
}
