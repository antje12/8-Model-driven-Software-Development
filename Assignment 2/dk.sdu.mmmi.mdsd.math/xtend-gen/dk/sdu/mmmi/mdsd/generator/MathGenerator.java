/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Declaration;
import dk.sdu.mmmi.mdsd.math.Exp;
import dk.sdu.mmmi.mdsd.math.Let;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.MultDiv;
import dk.sdu.mmmi.mdsd.math.OpMultDiv;
import dk.sdu.mmmi.mdsd.math.OpPlusMinus;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.PlusMinus;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final Map<String, Integer> result = MathGenerator.compute(math);
    this.displayPanel(result);
  }

  public static Map<String, Integer> compute(final MathExp math) {
    HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
    MathGenerator.variables = _hashMap;
    final Consumer<Declaration> _function = (Declaration v) -> {
      Exp _value = v.getValue();
      HashMap<String, Integer> _hashMap_1 = new HashMap<String, Integer>();
      MathGenerator.variables.put(v.getName(), Integer.valueOf(MathGenerator.computeExp(_value, _hashMap_1)));
    };
    math.getVariables().forEach(_function);
    return MathGenerator.variables;
  }

  public static int computeExp(final Exp exp, final Map<String, Integer> locals) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof PlusMinus) {
      _matched=true;
      int _xblockexpression = (int) 0;
      {
        final int left = MathGenerator.computeExp(((PlusMinus)exp).getLeft(), locals);
        final int right = MathGenerator.computeExp(((PlusMinus)exp).getRight(), locals);
        int _xifexpression = (int) 0;
        OpPlusMinus _operator = ((PlusMinus)exp).getOperator();
        if ((_operator instanceof Plus)) {
          _xifexpression = (left + right);
        } else {
          _xifexpression = (left - right);
        }
        _xblockexpression = _xifexpression;
      }
      _switchResult = _xblockexpression;
    }
    if (!_matched) {
      if (exp instanceof MultDiv) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          final int left = MathGenerator.computeExp(((MultDiv)exp).getLeft(), locals);
          final int right = MathGenerator.computeExp(((MultDiv)exp).getRight(), locals);
          int _xifexpression = (int) 0;
          OpMultDiv _operator = ((MultDiv)exp).getOperator();
          if ((_operator instanceof Mult)) {
            _xifexpression = (left * right);
          } else {
            _xifexpression = (left / right);
          }
          _xblockexpression = _xifexpression;
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          HashMap<String, Integer> layer = new HashMap<String, Integer>(locals);
          final int local = MathGenerator.computeExp(((Let)exp).getValue(), locals);
          layer.put(((Let)exp).getName(), Integer.valueOf(local));
          _xblockexpression = MathGenerator.computeExp(((Let)exp).getIn(), layer);
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      _switchResult = MathGenerator.computePrim(exp, locals);
    }
    return _switchResult;
  }

  public static int computePrim(final Exp factor, final Map<String, Integer> locals) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (factor instanceof dk.sdu.mmmi.mdsd.math.Number) {
      _matched=true;
      _switchResult = Integer.valueOf(((dk.sdu.mmmi.mdsd.math.Number)factor).getValue());
    }
    if (!_matched) {
      if (factor instanceof Parenthesis) {
        _matched=true;
        _switchResult = Integer.valueOf(MathGenerator.computeExp(((Parenthesis)factor).getExp(), locals));
      }
    }
    if (!_matched) {
      if (factor instanceof VariableUse) {
        _matched=true;
        Integer _xifexpression = null;
        boolean _containsKey = locals.containsKey(((VariableUse)factor).getRef().getName());
        if (_containsKey) {
          _xifexpression = locals.get(((VariableUse)factor).getRef().getName());
        } else {
          Integer _xifexpression_1 = null;
          boolean _containsKey_1 = MathGenerator.variables.containsKey(((VariableUse)factor).getRef().getName());
          if (_containsKey_1) {
            _xifexpression_1 = MathGenerator.variables.get(((VariableUse)factor).getRef().getName());
          } else {
            _xifexpression_1 = Integer.valueOf(MathGenerator.computeExp(((VariableUse)factor).getRef().getValue(), locals));
          }
          _xifexpression = _xifexpression_1;
        }
        _switchResult = _xifexpression;
      }
    }
    if (!_matched) {
      _switchResult = Integer.valueOf(0);
    }
    return (_switchResult).intValue();
  }

  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
}
