/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntitySystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EntitySystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExternalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExternalsExternalDefinitionParserRuleCall_2_0 = (RuleCall)cExternalsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cElementsAlternatives_3_0 = (Alternatives)cElementsAssignment_3.eContents().get(0);
		private final RuleCall cElementsRelationParserRuleCall_3_0_0 = (RuleCall)cElementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cElementsEntityParserRuleCall_3_0_1 = (RuleCall)cElementsAlternatives_3_0.eContents().get(1);
		
		//EntitySystem:
		//    'system' name=ID externals+=ExternalDefinition* (elements+=(Relation|Entity))+ ;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID externals+=ExternalDefinition* (elements+=(Relation|Entity))+
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//externals+=ExternalDefinition*
		public Assignment getExternalsAssignment_2() { return cExternalsAssignment_2; }
		
		//ExternalDefinition
		public RuleCall getExternalsExternalDefinitionParserRuleCall_2_0() { return cExternalsExternalDefinitionParserRuleCall_2_0; }
		
		//(elements+=(Relation|Entity))+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//(Relation|Entity)
		public Alternatives getElementsAlternatives_3_0() { return cElementsAlternatives_3_0; }
		
		//Relation
		public RuleCall getElementsRelationParserRuleCall_3_0_0() { return cElementsRelationParserRuleCall_3_0_0; }
		
		//Entity
		public RuleCall getElementsEntityParserRuleCall_3_0_1() { return cElementsEntityParserRuleCall_3_0_1; }
	}
	public class ExternalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExternalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_1_0 = (RuleCall)cTypesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalDefinition:
		//    'external' name=ID '('(types+=Type (',' types+=Type)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'external' name=ID '('(types+=Type (',' types+=Type)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(types+=Type (',' types+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0_0() { return cTypesTypeParserRuleCall_3_0_0; }
		
		//(',' types+=Type)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_1_1() { return cTypesAssignment_3_1_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_1_0() { return cTypesTypeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cElementsAlternatives_2_0 = (Alternatives)cElementsAssignment_2.eContents().get(0);
		private final RuleCall cElementsAttributeParserRuleCall_2_0_0 = (RuleCall)cElementsAlternatives_2_0.eContents().get(0);
		private final RuleCall cElementsRequireParserRuleCall_2_0_1 = (RuleCall)cElementsAlternatives_2_0.eContents().get(1);
		
		//Entity:
		//    'entity' name=ID (elements+=(Attribute|Require))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID (elements+=(Attribute|Require))*
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(elements+=(Attribute|Require))*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//(Attribute|Require)
		public Alternatives getElementsAlternatives_2_0() { return cElementsAlternatives_2_0; }
		
		//Attribute
		public RuleCall getElementsAttributeParserRuleCall_2_0_0() { return cElementsAttributeParserRuleCall_2_0_0; }
		
		//Require
		public RuleCall getElementsRequireParserRuleCall_2_0_1() { return cElementsRequireParserRuleCall_2_0_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Attribute:
		//    'attribute' name=ID 'as' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID 'as' type=Type
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequireAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRequireAlternatives_1_0 = (Alternatives)cRequireAssignment_1.eContents().get(0);
		private final RuleCall cRequireFunctionCallParserRuleCall_1_0_0 = (RuleCall)cRequireAlternatives_1_0.eContents().get(0);
		private final RuleCall cRequireVarExpParserRuleCall_1_0_1 = (RuleCall)cRequireAlternatives_1_0.eContents().get(1);
		
		//Require:
		//    'require' require=(FunctionCall | VarExp)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'require' require=(FunctionCall | VarExp)
		public Group getGroup() { return cGroup; }
		
		//'require'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//require=(FunctionCall | VarExp)
		public Assignment getRequireAssignment_1() { return cRequireAssignment_1; }
		
		//(FunctionCall | VarExp)
		public Alternatives getRequireAlternatives_1_0() { return cRequireAlternatives_1_0; }
		
		//FunctionCall
		public RuleCall getRequireFunctionCallParserRuleCall_1_0_0() { return cRequireFunctionCallParserRuleCall_1_0_0; }
		
		//VarExp
		public RuleCall getRequireVarExpParserRuleCall_1_0_1() { return cRequireVarExpParserRuleCall_1_0_1; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionExternalDefinitionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionExternalDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionExternalDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cVariablesAttributeCrossReference_2_0_0 = (CrossReference)cVariablesAssignment_2_0.eContents().get(0);
		private final RuleCall cVariablesAttributeIDTerminalRuleCall_2_0_0_1 = (RuleCall)cVariablesAttributeCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cVariablesAttributeCrossReference_2_1_1_0 = (CrossReference)cVariablesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cVariablesAttributeIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cVariablesAttributeCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//    function=[ExternalDefinition] '('(variables+=[Attribute] (',' variables+=[Attribute])*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//function=[ExternalDefinition] '('(variables+=[Attribute] (',' variables+=[Attribute])*)? ')'
		public Group getGroup() { return cGroup; }
		
		//function=[ExternalDefinition]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[ExternalDefinition]
		public CrossReference getFunctionExternalDefinitionCrossReference_0_0() { return cFunctionExternalDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionExternalDefinitionIDTerminalRuleCall_0_0_1() { return cFunctionExternalDefinitionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(variables+=[Attribute] (',' variables+=[Attribute])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//variables+=[Attribute]
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }
		
		//[Attribute]
		public CrossReference getVariablesAttributeCrossReference_2_0_0() { return cVariablesAttributeCrossReference_2_0_0; }
		
		//ID
		public RuleCall getVariablesAttributeIDTerminalRuleCall_2_0_0_1() { return cVariablesAttributeIDTerminalRuleCall_2_0_0_1; }
		
		//(',' variables+=[Attribute])*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//variables+=[Attribute]
		public Assignment getVariablesAssignment_2_1_1() { return cVariablesAssignment_2_1_1; }
		
		//[Attribute]
		public CrossReference getVariablesAttributeCrossReference_2_1_1_0() { return cVariablesAttributeCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getVariablesAttributeIDTerminalRuleCall_2_1_1_0_1() { return cVariablesAttributeIDTerminalRuleCall_2_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VarExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VarExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarRefAttributeCrossReference_0_0 = (CrossReference)cVarRefAssignment_0.eContents().get(0);
		private final RuleCall cVarRefAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cVarRefAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//VarExp:
		//    varRef=[Attribute] op=('==' | '>' | '>=') exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varRef=[Attribute] op=('==' | '>' | '>=') exp=Exp
		public Group getGroup() { return cGroup; }
		
		//varRef=[Attribute]
		public Assignment getVarRefAssignment_0() { return cVarRefAssignment_0; }
		
		//[Attribute]
		public CrossReference getVarRefAttributeCrossReference_0_0() { return cVarRefAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getVarRefAttributeIDTerminalRuleCall_0_0_1() { return cVarRefAttributeIDTerminalRuleCall_0_0_1; }
		
		//op=('==' | '>' | '>=')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('==' | '>' | '>=')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_1() { return cOpGreaterThanSignKeyword_1_0_1; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_0_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Exp");
		private final RuleCall cPlusOrMinusParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp returns Expression: PlusOrMinus;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall() { return cPlusOrMinusParserRuleCall; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus returns Expression: Term (({Plus.left=current} '+' | {Minus.left=current} '-')right=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Term (({Plus.left=current} '+' | {Minus.left=current} '-')right=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-')right=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Term
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Term
		public RuleCall getRightTermParserRuleCall_1_1_0() { return cRightTermParserRuleCall_1_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Term returns Expression: Factor ({Mult.left=current} '*' right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Mult.left=current} '*' right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Mult.left=current} '*' right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0() { return cMultLeftAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Factor");
		private final RuleCall cAtomicParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Factor returns Expression: Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall() { return cAtomicParserRuleCall; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParenthesisAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Atomic returns Expression:
		//    {Number} value=INT |
		//    {Parenthesis} '(' exp=Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number} value=INT |
		//{Parenthesis} '(' exp=Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Number} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Number}
		public Action getNumberAction_0_0() { return cNumberAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{Parenthesis} '(' exp=Exp ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Parenthesis}
		public Action getParenthesisAction_1_0() { return cParenthesisAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_2_0() { return cExpExpParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Type:
		//    'string' | 'number'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'string' | 'number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'string'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInheritanceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRelationKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBaseEntityAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cBaseEntityEntityCrossReference_0_2_0 = (CrossReference)cBaseEntityAssignment_0_2.eContents().get(0);
		private final RuleCall cBaseEntityEntityIDTerminalRuleCall_0_2_0_1 = (RuleCall)cBaseEntityEntityCrossReference_0_2_0.eContents().get(1);
		private final Keyword cIsKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSuperEntityAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cSuperEntityEntityCrossReference_0_4_0 = (CrossReference)cSuperEntityAssignment_0_4.eContents().get(0);
		private final RuleCall cSuperEntityEntityIDTerminalRuleCall_0_4_0_1 = (RuleCall)cSuperEntityEntityCrossReference_0_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAssociationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRelationKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cAKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Assignment cManyFromAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final Keyword cManyFromManyKeyword_1_2_1_0 = (Keyword)cManyFromAssignment_1_2_1.eContents().get(0);
		private final Assignment cFromAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cFromEntityCrossReference_1_3_0 = (CrossReference)cFromAssignment_1_3.eContents().get(0);
		private final RuleCall cFromEntityIDTerminalRuleCall_1_3_0_1 = (RuleCall)cFromEntityCrossReference_1_3_0.eContents().get(1);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cHasKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cHaveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Alternatives cAlternatives_1_5 = (Alternatives)cGroup_1.eContents().get(5);
		private final Keyword cAKeyword_1_5_0 = (Keyword)cAlternatives_1_5.eContents().get(0);
		private final Assignment cManyToAssignment_1_5_1 = (Assignment)cAlternatives_1_5.eContents().get(1);
		private final Keyword cManyToManyKeyword_1_5_1_0 = (Keyword)cManyToAssignment_1_5_1.eContents().get(0);
		private final Assignment cToAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final CrossReference cToEntityCrossReference_1_6_0 = (CrossReference)cToAssignment_1_6.eContents().get(0);
		private final RuleCall cToEntityIDTerminalRuleCall_1_6_0_1 = (RuleCall)cToEntityCrossReference_1_6_0.eContents().get(1);
		
		//Relation:
		//    {Inheritance} 'relation' baseEntity=[Entity] 'is' superEntity=[Entity] |
		//    {Association} 'relation' ('a'|manyFrom?='many')? from=[Entity] ('has'|'have') ('a'|manyTo?='many')? to=[Entity]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inheritance} 'relation' baseEntity=[Entity] 'is' superEntity=[Entity] |
		//{Association} 'relation' ('a'|manyFrom?='many')? from=[Entity] ('has'|'have') ('a'|manyTo?='many')? to=[Entity]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Inheritance} 'relation' baseEntity=[Entity] 'is' superEntity=[Entity]
		public Group getGroup_0() { return cGroup_0; }
		
		//{Inheritance}
		public Action getInheritanceAction_0_0() { return cInheritanceAction_0_0; }
		
		//'relation'
		public Keyword getRelationKeyword_0_1() { return cRelationKeyword_0_1; }
		
		//baseEntity=[Entity]
		public Assignment getBaseEntityAssignment_0_2() { return cBaseEntityAssignment_0_2; }
		
		//[Entity]
		public CrossReference getBaseEntityEntityCrossReference_0_2_0() { return cBaseEntityEntityCrossReference_0_2_0; }
		
		//ID
		public RuleCall getBaseEntityEntityIDTerminalRuleCall_0_2_0_1() { return cBaseEntityEntityIDTerminalRuleCall_0_2_0_1; }
		
		//'is'
		public Keyword getIsKeyword_0_3() { return cIsKeyword_0_3; }
		
		//superEntity=[Entity]
		public Assignment getSuperEntityAssignment_0_4() { return cSuperEntityAssignment_0_4; }
		
		//[Entity]
		public CrossReference getSuperEntityEntityCrossReference_0_4_0() { return cSuperEntityEntityCrossReference_0_4_0; }
		
		//ID
		public RuleCall getSuperEntityEntityIDTerminalRuleCall_0_4_0_1() { return cSuperEntityEntityIDTerminalRuleCall_0_4_0_1; }
		
		//{Association} 'relation' ('a'|manyFrom?='many')? from=[Entity] ('has'|'have') ('a'|manyTo?='many')? to=[Entity]
		public Group getGroup_1() { return cGroup_1; }
		
		//{Association}
		public Action getAssociationAction_1_0() { return cAssociationAction_1_0; }
		
		//'relation'
		public Keyword getRelationKeyword_1_1() { return cRelationKeyword_1_1; }
		
		//('a'|manyFrom?='many')?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'a'
		public Keyword getAKeyword_1_2_0() { return cAKeyword_1_2_0; }
		
		//manyFrom?='many'
		public Assignment getManyFromAssignment_1_2_1() { return cManyFromAssignment_1_2_1; }
		
		//'many'
		public Keyword getManyFromManyKeyword_1_2_1_0() { return cManyFromManyKeyword_1_2_1_0; }
		
		//from=[Entity]
		public Assignment getFromAssignment_1_3() { return cFromAssignment_1_3; }
		
		//[Entity]
		public CrossReference getFromEntityCrossReference_1_3_0() { return cFromEntityCrossReference_1_3_0; }
		
		//ID
		public RuleCall getFromEntityIDTerminalRuleCall_1_3_0_1() { return cFromEntityIDTerminalRuleCall_1_3_0_1; }
		
		//('has'|'have')
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//'has'
		public Keyword getHasKeyword_1_4_0() { return cHasKeyword_1_4_0; }
		
		//'have'
		public Keyword getHaveKeyword_1_4_1() { return cHaveKeyword_1_4_1; }
		
		//('a'|manyTo?='many')?
		public Alternatives getAlternatives_1_5() { return cAlternatives_1_5; }
		
		//'a'
		public Keyword getAKeyword_1_5_0() { return cAKeyword_1_5_0; }
		
		//manyTo?='many'
		public Assignment getManyToAssignment_1_5_1() { return cManyToAssignment_1_5_1; }
		
		//'many'
		public Keyword getManyToManyKeyword_1_5_1_0() { return cManyToManyKeyword_1_5_1_0; }
		
		//to=[Entity]
		public Assignment getToAssignment_1_6() { return cToAssignment_1_6; }
		
		//[Entity]
		public CrossReference getToEntityCrossReference_1_6_0() { return cToEntityCrossReference_1_6_0; }
		
		//ID
		public RuleCall getToEntityIDTerminalRuleCall_1_6_0_1() { return cToEntityIDTerminalRuleCall_1_6_0_1; }
	}
	
	
	private final EntitySystemElements pEntitySystem;
	private final ExternalDefinitionElements pExternalDefinition;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final RequireElements pRequire;
	private final FunctionCallElements pFunctionCall;
	private final VarExpElements pVarExp;
	private final ExpElements pExp;
	private final PlusOrMinusElements pPlusOrMinus;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final AtomicElements pAtomic;
	private final TypeElements pType;
	private final RelationElements pRelation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEntitySystem = new EntitySystemElements();
		this.pExternalDefinition = new ExternalDefinitionElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pRequire = new RequireElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVarExp = new VarExpElements();
		this.pExp = new ExpElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pAtomic = new AtomicElements();
		this.pType = new TypeElements();
		this.pRelation = new RelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EntitySystem:
	//    'system' name=ID externals+=ExternalDefinition* (elements+=(Relation|Entity))+ ;
	public EntitySystemElements getEntitySystemAccess() {
		return pEntitySystem;
	}
	
	public ParserRule getEntitySystemRule() {
		return getEntitySystemAccess().getRule();
	}
	
	//ExternalDefinition:
	//    'external' name=ID '('(types+=Type (',' types+=Type)*)? ')'
	//;
	public ExternalDefinitionElements getExternalDefinitionAccess() {
		return pExternalDefinition;
	}
	
	public ParserRule getExternalDefinitionRule() {
		return getExternalDefinitionAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID (elements+=(Attribute|Require))*
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//    'attribute' name=ID 'as' type=Type
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Require:
	//    'require' require=(FunctionCall | VarExp)
	//;
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//FunctionCall:
	//    function=[ExternalDefinition] '('(variables+=[Attribute] (',' variables+=[Attribute])*)? ')'
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//VarExp:
	//    varRef=[Attribute] op=('==' | '>' | '>=') exp=Exp
	//;
	public VarExpElements getVarExpAccess() {
		return pVarExp;
	}
	
	public ParserRule getVarExpRule() {
		return getVarExpAccess().getRule();
	}
	
	//Exp returns Expression: PlusOrMinus;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//PlusOrMinus returns Expression: Term (({Plus.left=current} '+' | {Minus.left=current} '-')right=Term)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//Term returns Expression: Factor ({Mult.left=current} '*' right=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor returns Expression: Atomic;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Atomic returns Expression:
	//    {Number} value=INT |
	//    {Parenthesis} '(' exp=Exp ')'
	//;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Type:
	//    'string' | 'number'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Relation:
	//    {Inheritance} 'relation' baseEntity=[Entity] 'is' superEntity=[Entity] |
	//    {Association} 'relation' ('a'|manyFrom?='many')? from=[Entity] ('has'|'have') ('a'|manyTo?='many')? to=[Entity]
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
