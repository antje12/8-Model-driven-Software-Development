/**
 * generated by Xtext 2.29.0
 */
package org.xtext.exam22.scoping;

import java.util.Arrays;
import java.util.Collections;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.xtext.exam22.dsl.EndingTarget;
import org.xtext.exam22.dsl.Target;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DslScopeProvider extends AbstractDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    return this.scopeForEObject(context, reference);
  }

  protected IScope _scopeForEObject(final EObject context, final EReference reference) {
    return super.getScope(context, reference);
  }

  protected IScope _scopeForEObject(final EndingTarget endingTarget, final EReference reference) {
    IScope _xblockexpression = null;
    {
      final Target container = EcoreUtil2.<Target>getContainerOfType(endingTarget, Target.class);
      _xblockexpression = Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(container)), this.scopeForEObject(container.getTo(), reference));
    }
    return _xblockexpression;
  }

  public IScope scopeForEObject(final EObject endingTarget, final EReference reference) {
    if (endingTarget instanceof EndingTarget) {
      return _scopeForEObject((EndingTarget)endingTarget, reference);
    } else if (endingTarget != null) {
      return _scopeForEObject(endingTarget, reference);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(endingTarget, reference).toString());
    }
  }
}
