/**
 * generated by Xtext 2.29.0
 */
package org.xtext.exam22.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.exam22.dsl.CrossRef;
import org.xtext.exam22.dsl.DslPackage;
import org.xtext.exam22.dsl.EndingTarget;
import org.xtext.exam22.dsl.Exp;
import org.xtext.exam22.dsl.Target;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Target</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.exam22.dsl.impl.TargetImpl#getTo <em>To</em>}</li>
 *   <li>{@link org.xtext.exam22.dsl.impl.TargetImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@link org.xtext.exam22.dsl.impl.TargetImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.exam22.dsl.impl.TargetImpl#getEndingTargets <em>Ending Targets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TargetImpl extends MinimalEObjectImpl.Container implements Target
{
  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected CrossRef to;

  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<Exp> expressions;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Exp condition;

  /**
   * The cached value of the '{@link #getEndingTargets() <em>Ending Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndingTargets()
   * @generated
   * @ordered
   */
  protected EList<EndingTarget> endingTargets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.TARGET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CrossRef getTo()
  {
    if (to != null && to.eIsProxy())
    {
      InternalEObject oldTo = (InternalEObject)to;
      to = (CrossRef)eResolveProxy(oldTo);
      if (to != oldTo)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DslPackage.TARGET__TO, oldTo, to));
      }
    }
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossRef basicGetTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(CrossRef newTo)
  {
    CrossRef oldTo = to;
    to = newTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TARGET__TO, oldTo, to));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Exp> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<Exp>(Exp.class, this, DslPackage.TARGET__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Exp newCondition, NotificationChain msgs)
  {
    Exp oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TARGET__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Exp newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TARGET__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TARGET__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TARGET__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EndingTarget> getEndingTargets()
  {
    if (endingTargets == null)
    {
      endingTargets = new EObjectContainmentEList<EndingTarget>(EndingTarget.class, this, DslPackage.TARGET__ENDING_TARGETS);
    }
    return endingTargets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.TARGET__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
      case DslPackage.TARGET__CONDITION:
        return basicSetCondition(null, msgs);
      case DslPackage.TARGET__ENDING_TARGETS:
        return ((InternalEList<?>)getEndingTargets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.TARGET__TO:
        if (resolve) return getTo();
        return basicGetTo();
      case DslPackage.TARGET__EXPRESSIONS:
        return getExpressions();
      case DslPackage.TARGET__CONDITION:
        return getCondition();
      case DslPackage.TARGET__ENDING_TARGETS:
        return getEndingTargets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.TARGET__TO:
        setTo((CrossRef)newValue);
        return;
      case DslPackage.TARGET__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends Exp>)newValue);
        return;
      case DslPackage.TARGET__CONDITION:
        setCondition((Exp)newValue);
        return;
      case DslPackage.TARGET__ENDING_TARGETS:
        getEndingTargets().clear();
        getEndingTargets().addAll((Collection<? extends EndingTarget>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TARGET__TO:
        setTo((CrossRef)null);
        return;
      case DslPackage.TARGET__EXPRESSIONS:
        getExpressions().clear();
        return;
      case DslPackage.TARGET__CONDITION:
        setCondition((Exp)null);
        return;
      case DslPackage.TARGET__ENDING_TARGETS:
        getEndingTargets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TARGET__TO:
        return to != null;
      case DslPackage.TARGET__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
      case DslPackage.TARGET__CONDITION:
        return condition != null;
      case DslPackage.TARGET__ENDING_TARGETS:
        return endingTargets != null && !endingTargets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TargetImpl
