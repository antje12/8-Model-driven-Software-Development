/*
 * generated by Xtext 2.29.0
 */
package org.xtext.exam22.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Assignment cScenariosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScenariosScenarioParserRuleCall_3_0 = (RuleCall)cScenariosAssignment_3.eContents().get(0);
		
		//Model:
		//    'story' name=ID functions+=Function* scenarios+=Scenario*;
		@Override public ParserRule getRule() { return rule; }
		
		//'story' name=ID functions+=Function* scenarios+=Scenario*
		public Group getGroup() { return cGroup; }
		
		//'story'
		public Keyword getStoryKeyword_0() { return cStoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0() { return cFunctionsFunctionParserRuleCall_2_0; }
		
		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_3() { return cScenariosAssignment_3; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_3_0() { return cScenariosScenarioParserRuleCall_3_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_1_0 = (RuleCall)cTypesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeTypeParserRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		
		//Function:
		//    'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' returnType=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' returnType=Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(types+=Type (',' types+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0_0() { return cTypesTypeParserRuleCall_3_0_0; }
		
		//(',' types+=Type)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_1_1() { return cTypesAssignment_3_1_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_1_0() { return cTypesTypeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_6_0() { return cReturnTypeTypeParserRuleCall_6_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cVariablesVariableDefParserRuleCall_4_0_0 = (RuleCall)cVariablesAssignment_4_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_4_1_0 = (RuleCall)cStatementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Scenario:
		//    'scenario' name=ID ('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		//    '{' (variables+=VariableDef | statements+=Statement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID ('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		//'{' (variables+=VariableDef | statements+=Statement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0_0() { return cParametersParameterParserRuleCall_2_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(variables+=VariableDef | statements+=Statement)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//variables+=VariableDef
		public Assignment getVariablesAssignment_4_0() { return cVariablesAssignment_4_0; }
		
		//VariableDef
		public RuleCall getVariablesVariableDefParserRuleCall_4_0_0() { return cVariablesVariableDefParserRuleCall_4_0_0; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_4_1() { return cStatementsAssignment_4_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_1_0() { return cStatementsStatementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnounceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//    Announce | Question | End;
		@Override public ParserRule getRule() { return rule; }
		
		//Announce | Question | End
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Announce
		public RuleCall getAnnounceParserRuleCall_0() { return cAnnounceParserRuleCall_0; }
		
		//Question
		public RuleCall getQuestionParserRuleCall_1() { return cQuestionParserRuleCall_1; }
		
		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}
	public class VariableDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.VariableDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableDef:
		//    'var' name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class AnnounceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Announce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnounceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsTargetParserRuleCall_3_0 = (RuleCall)cTargetsAssignment_3.eContents().get(0);
		
		//Announce:
		//    'announce' name=ID expression=Exp targets+=Target+;
		@Override public ParserRule getRule() { return rule; }
		
		//'announce' name=ID expression=Exp targets+=Target+
		public Group getGroup() { return cGroup; }
		
		//'announce'
		public Keyword getAnnounceKeyword_0() { return cAnnounceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_2_0() { return cExpressionExpParserRuleCall_2_0; }
		
		//targets+=Target+
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_3_0() { return cTargetsTargetParserRuleCall_3_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputExpParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cVariableVariableDefCrossReference_5_1_0 = (CrossReference)cVariableAssignment_5_1.eContents().get(0);
		private final RuleCall cVariableVariableDefIDTerminalRuleCall_5_1_0_1 = (RuleCall)cVariableVariableDefCrossReference_5_1_0.eContents().get(1);
		private final Assignment cTargetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetsTargetParserRuleCall_6_0 = (RuleCall)cTargetsAssignment_6.eContents().get(0);
		
		//Question:
		//    'question' name=ID expression=Exp 'as' output=Exp ('in' variable=[VariableDef])? targets+=Target+;
		@Override public ParserRule getRule() { return rule; }
		
		//'question' name=ID expression=Exp 'as' output=Exp ('in' variable=[VariableDef])? targets+=Target+
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_2_0() { return cExpressionExpParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//output=Exp
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//Exp
		public RuleCall getOutputExpParserRuleCall_4_0() { return cOutputExpParserRuleCall_4_0; }
		
		//('in' variable=[VariableDef])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//variable=[VariableDef]
		public Assignment getVariableAssignment_5_1() { return cVariableAssignment_5_1; }
		
		//[VariableDef]
		public CrossReference getVariableVariableDefCrossReference_5_1_0() { return cVariableVariableDefCrossReference_5_1_0; }
		
		//ID
		public RuleCall getVariableVariableDefIDTerminalRuleCall_5_1_0_1() { return cVariableVariableDefIDTerminalRuleCall_5_1_0_1; }
		
		//targets+=Target+
		public Assignment getTargetsAssignment_6() { return cTargetsAssignment_6; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_6_0() { return cTargetsTargetParserRuleCall_6_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//End:
		//    'end' name=ID expression=Exp?;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' name=ID expression=Exp?
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Exp?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_2_0() { return cExpressionExpParserRuleCall_2_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cToCrossRefCrossReference_1_0 = (CrossReference)cToAssignment_1.eContents().get(0);
		private final RuleCall cToCrossRefIDTerminalRuleCall_1_0_1 = (RuleCall)cToCrossRefCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cExpressionsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cExpressionsExpParserRuleCall_2_1_0_0 = (RuleCall)cExpressionsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cExpressionsExpParserRuleCall_2_1_1_1_0 = (RuleCall)cExpressionsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionExpParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEndingTargetsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEndingTargetsEndingTargetParserRuleCall_4_1_0 = (RuleCall)cEndingTargetsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Target:
		//    'to' to=[CrossRef] ('('(expressions+=Exp (',' expressions+=Exp)*)?')')? ('if' condition=Exp)? ('{' endingTargets+=EndingTarget+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' to=[CrossRef] ('('(expressions+=Exp (',' expressions+=Exp)*)?')')? ('if' condition=Exp)? ('{' endingTargets+=EndingTarget+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//to=[CrossRef]
		public Assignment getToAssignment_1() { return cToAssignment_1; }
		
		//[CrossRef]
		public CrossReference getToCrossRefCrossReference_1_0() { return cToCrossRefCrossReference_1_0; }
		
		//ID
		public RuleCall getToCrossRefIDTerminalRuleCall_1_0_1() { return cToCrossRefIDTerminalRuleCall_1_0_1; }
		
		//('('(expressions+=Exp (',' expressions+=Exp)*)?')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(expressions+=Exp (',' expressions+=Exp)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//expressions+=Exp
		public Assignment getExpressionsAssignment_2_1_0() { return cExpressionsAssignment_2_1_0; }
		
		//Exp
		public RuleCall getExpressionsExpParserRuleCall_2_1_0_0() { return cExpressionsExpParserRuleCall_2_1_0_0; }
		
		//(',' expressions+=Exp)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//expressions+=Exp
		public Assignment getExpressionsAssignment_2_1_1_1() { return cExpressionsAssignment_2_1_1_1; }
		
		//Exp
		public RuleCall getExpressionsExpParserRuleCall_2_1_1_1_0() { return cExpressionsExpParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('if' condition=Exp)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//condition=Exp
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//Exp
		public RuleCall getConditionExpParserRuleCall_3_1_0() { return cConditionExpParserRuleCall_3_1_0; }
		
		//('{' endingTargets+=EndingTarget+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//endingTargets+=EndingTarget+
		public Assignment getEndingTargetsAssignment_4_1() { return cEndingTargetsAssignment_4_1; }
		
		//EndingTarget
		public RuleCall getEndingTargetsEndingTargetParserRuleCall_4_1_0() { return cEndingTargetsEndingTargetParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EndingTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.EndingTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEndEndCrossReference_1_0 = (CrossReference)cEndAssignment_1.eContents().get(0);
		private final RuleCall cEndEndIDTerminalRuleCall_1_0_1 = (RuleCall)cEndEndCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//EndingTarget:
		//    'on' end=[End] target=Target;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' end=[End] target=Target
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//end=[End]
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }
		
		//[End]
		public CrossReference getEndEndCrossReference_1_0() { return cEndEndCrossReference_1_0; }
		
		//ID
		public RuleCall getEndEndIDTerminalRuleCall_1_0_1() { return cEndEndIDTerminalRuleCall_1_0_1; }
		
		//target=Target
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_2_0() { return cTargetTargetParserRuleCall_2_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//    'boolean' | 'text' | 'number';
		@Override public ParserRule getRule() { return rule; }
		
		//'boolean' | 'text' | 'number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'number'
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Exp");
		private final RuleCall cBooleanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp:
		//    Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall() { return cBooleanParserRuleCall; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Boolean returns Exp:
		//    Equal ({Boolean.left=current} op=('&&'|'||') right=Equal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equal ({Boolean.left=current} op=('&&'|'||') right=Equal)*
		public Group getGroup() { return cGroup; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_0() { return cEqualParserRuleCall_0; }
		
		//({Boolean.left=current} op=('&&'|'||') right=Equal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Boolean.left=current}
		public Action getBooleanLeftAction_1_0() { return cBooleanLeftAction_1_0; }
		
		//op=('&&'|'||')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('&&'|'||')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0() { return cOpAmpersandAmpersandKeyword_1_1_0_0; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_1() { return cOpVerticalLineVerticalLineKeyword_1_1_0_1; }
		
		//right=Equal
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equal
		public RuleCall getRightEqualParserRuleCall_1_2_0() { return cRightEqualParserRuleCall_1_2_0; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompareParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equal returns Exp:
		//    Compare ({Equal.left=current} op=('=='|'!=') right=Compare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Compare ({Equal.left=current} op=('=='|'!=') right=Compare)*
		public Group getGroup() { return cGroup; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_0() { return cCompareParserRuleCall_0; }
		
		//({Equal.left=current} op=('=='|'!=') right=Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equal.left=current}
		public Action getEqualLeftAction_1_0() { return cEqualLeftAction_1_0; }
		
		//op=('=='|'!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('=='|'!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Compare
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Compare
		public RuleCall getRightCompareParserRuleCall_1_2_0() { return cRightCompareParserRuleCall_1_2_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompareLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConcatParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Compare returns Exp:
		//    Concat ({Compare.left=current} op=('<'|'>'|'<='|'>=') right=Concat)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Concat ({Compare.left=current} op=('<'|'>'|'<='|'>=') right=Concat)*
		public Group getGroup() { return cGroup; }
		
		//Concat
		public RuleCall getConcatParserRuleCall_0() { return cConcatParserRuleCall_0; }
		
		//({Compare.left=current} op=('<'|'>'|'<='|'>=') right=Concat)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Compare.left=current}
		public Action getCompareLeftAction_1_0() { return cCompareLeftAction_1_0; }
		
		//op=('<'|'>'|'<='|'>=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<'|'>'|'<='|'>=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=Concat
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Concat
		public RuleCall getRightConcatParserRuleCall_1_2_0() { return cRightConcatParserRuleCall_1_2_0; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConcatLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Concat returns Exp:
		//    PlusMinus ({Concat.left=current} '&' right=PlusMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusMinus ({Concat.left=current} '&' right=PlusMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_0() { return cPlusMinusParserRuleCall_0; }
		
		//({Concat.left=current} '&' right=PlusMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Concat.left=current}
		public Action getConcatLeftAction_1_0() { return cConcatLeftAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=PlusMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusMinus
		public RuleCall getRightPlusMinusParserRuleCall_1_2_0() { return cRightPlusMinusParserRuleCall_1_2_0; }
	}
	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusMinusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusMinus returns Exp:
		//    MultDiv ({PlusMinus.left=current} op=('+'|'-') right=MultDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultDiv ({PlusMinus.left=current} op=('+'|'-') right=MultDiv)*
		public Group getGroup() { return cGroup; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_0() { return cMultDivParserRuleCall_0; }
		
		//({PlusMinus.left=current} op=('+'|'-') right=MultDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusMinus.left=current}
		public Action getPlusMinusLeftAction_1_0() { return cPlusMinusLeftAction_1_0; }
		
		//op=('+'|'-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+'|'-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MultDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultDiv
		public RuleCall getRightMultDivParserRuleCall_1_2_0() { return cRightMultDivParserRuleCall_1_2_0; }
	}
	public class MultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.MultDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimitiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultDiv returns Exp:
		//    Primitive ({MultDiv.left=current} op=('*'|'/') right=Primitive)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive ({MultDiv.left=current} op=('*'|'/') right=Primitive)*
		public Group getGroup() { return cGroup; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//({MultDiv.left=current} op=('*'|'/') right=Primitive)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultDiv.left=current}
		public Action getMultDivLeftAction_1_0() { return cMultDivLeftAction_1_0; }
		
		//op=('*'|'/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*'|'/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primitive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primitive
		public RuleCall getRightPrimitiveParserRuleCall_1_2_0() { return cRightPrimitiveParserRuleCall_1_2_0; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNotAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpPrimitiveParserRuleCall_3_2_0 = (RuleCall)cExpAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cTypeConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cThisAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cThisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cVarRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cRefAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRefCrossRefCrossReference_6_1_0 = (CrossReference)cRefAssignment_6_1.eContents().get(0);
		private final RuleCall cRefCrossRefIDTerminalRuleCall_6_1_0_1 = (RuleCall)cRefCrossRefCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cFuncCallAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cRefAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cRefFunctionCrossReference_7_1_0 = (CrossReference)cRefAssignment_7_1.eContents().get(0);
		private final RuleCall cRefFunctionIDTerminalRuleCall_7_1_0_1 = (RuleCall)cRefFunctionCrossReference_7_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Assignment cExpressionsAssignment_7_3_0 = (Assignment)cGroup_7_3.eContents().get(0);
		private final RuleCall cExpressionsExpParserRuleCall_7_3_0_0 = (RuleCall)cExpressionsAssignment_7_3_0.eContents().get(0);
		private final Group cGroup_7_3_1 = (Group)cGroup_7_3.eContents().get(1);
		private final Keyword cCommaKeyword_7_3_1_0 = (Keyword)cGroup_7_3_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_7_3_1_1 = (Assignment)cGroup_7_3_1.eContents().get(1);
		private final RuleCall cExpressionsExpParserRuleCall_7_3_1_1_0 = (RuleCall)cExpressionsAssignment_7_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cParenthesisAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_8_2_0 = (RuleCall)cExpAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Primitive returns Exp:
		//    {IntConstant} value=INT |
		//    {StringConstant} value=STRING |
		//    {BoolConstant} value=('true' | 'false') |
		//    {Not} '!' exp=Primitive |
		//    {TypeConstant} type=Type |
		//    {This} 'this' |
		//    {VarRef} ref=[CrossRef] |
		//    {FuncCall} ref=[Function] '('(expressions+=Exp (',' expressions+=Exp)*)?')' |
		//    {Parenthesis} '(' exp=Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT |
		//{StringConstant} value=STRING |
		//{BoolConstant} value=('true' | 'false') |
		//{Not} '!' exp=Primitive |
		//{TypeConstant} type=Type |
		//{This} 'this' |
		//{VarRef} ref=[CrossRef] |
		//{FuncCall} ref=[Function] '('(expressions+=Exp (',' expressions+=Exp)*)?')' |
		//{Parenthesis} '(' exp=Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{Not} '!' exp=Primitive
		public Group getGroup_3() { return cGroup_3; }
		
		//{Not}
		public Action getNotAction_3_0() { return cNotAction_3_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3_1() { return cExclamationMarkKeyword_3_1; }
		
		//exp=Primitive
		public Assignment getExpAssignment_3_2() { return cExpAssignment_3_2; }
		
		//Primitive
		public RuleCall getExpPrimitiveParserRuleCall_3_2_0() { return cExpPrimitiveParserRuleCall_3_2_0; }
		
		//{TypeConstant} type=Type
		public Group getGroup_4() { return cGroup_4; }
		
		//{TypeConstant}
		public Action getTypeConstantAction_4_0() { return cTypeConstantAction_4_0; }
		
		//type=Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_1_0() { return cTypeTypeParserRuleCall_4_1_0; }
		
		//{This} 'this'
		public Group getGroup_5() { return cGroup_5; }
		
		//{This}
		public Action getThisAction_5_0() { return cThisAction_5_0; }
		
		//'this'
		public Keyword getThisKeyword_5_1() { return cThisKeyword_5_1; }
		
		//{VarRef} ref=[CrossRef]
		public Group getGroup_6() { return cGroup_6; }
		
		//{VarRef}
		public Action getVarRefAction_6_0() { return cVarRefAction_6_0; }
		
		//ref=[CrossRef]
		public Assignment getRefAssignment_6_1() { return cRefAssignment_6_1; }
		
		//[CrossRef]
		public CrossReference getRefCrossRefCrossReference_6_1_0() { return cRefCrossRefCrossReference_6_1_0; }
		
		//ID
		public RuleCall getRefCrossRefIDTerminalRuleCall_6_1_0_1() { return cRefCrossRefIDTerminalRuleCall_6_1_0_1; }
		
		//{FuncCall} ref=[Function] '('(expressions+=Exp (',' expressions+=Exp)*)?')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{FuncCall}
		public Action getFuncCallAction_7_0() { return cFuncCallAction_7_0; }
		
		//ref=[Function]
		public Assignment getRefAssignment_7_1() { return cRefAssignment_7_1; }
		
		//[Function]
		public CrossReference getRefFunctionCrossReference_7_1_0() { return cRefFunctionCrossReference_7_1_0; }
		
		//ID
		public RuleCall getRefFunctionIDTerminalRuleCall_7_1_0_1() { return cRefFunctionIDTerminalRuleCall_7_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//(expressions+=Exp (',' expressions+=Exp)*)?
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//expressions+=Exp
		public Assignment getExpressionsAssignment_7_3_0() { return cExpressionsAssignment_7_3_0; }
		
		//Exp
		public RuleCall getExpressionsExpParserRuleCall_7_3_0_0() { return cExpressionsExpParserRuleCall_7_3_0_0; }
		
		//(',' expressions+=Exp)*
		public Group getGroup_7_3_1() { return cGroup_7_3_1; }
		
		//','
		public Keyword getCommaKeyword_7_3_1_0() { return cCommaKeyword_7_3_1_0; }
		
		//expressions+=Exp
		public Assignment getExpressionsAssignment_7_3_1_1() { return cExpressionsAssignment_7_3_1_1; }
		
		//Exp
		public RuleCall getExpressionsExpParserRuleCall_7_3_1_1_0() { return cExpressionsExpParserRuleCall_7_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//{Parenthesis} '(' exp=Exp ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{Parenthesis}
		public Action getParenthesisAction_8_0() { return cParenthesisAction_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_8_2() { return cExpAssignment_8_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_8_2_0() { return cExpExpParserRuleCall_8_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class CrossRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.exam22.Dsl.CrossRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParameterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//CrossRef:
		//    Statement|Scenario|Function|Parameter|VariableDef;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement|Scenario|Function|Parameter|VariableDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_1() { return cScenarioParserRuleCall_1; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_2() { return cFunctionParserRuleCall_2; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_3() { return cParameterParserRuleCall_3; }
		
		//VariableDef
		public RuleCall getVariableDefParserRuleCall_4() { return cVariableDefParserRuleCall_4; }
	}
	
	
	private final ModelElements pModel;
	private final FunctionElements pFunction;
	private final ScenarioElements pScenario;
	private final StatementElements pStatement;
	private final VariableDefElements pVariableDef;
	private final AnnounceElements pAnnounce;
	private final QuestionElements pQuestion;
	private final EndElements pEnd;
	private final TargetElements pTarget;
	private final EndingTargetElements pEndingTarget;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final ExpElements pExp;
	private final BooleanElements pBoolean;
	private final EqualElements pEqual;
	private final CompareElements pCompare;
	private final ConcatElements pConcat;
	private final PlusMinusElements pPlusMinus;
	private final MultDivElements pMultDiv;
	private final PrimitiveElements pPrimitive;
	private final CrossRefElements pCrossRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFunction = new FunctionElements();
		this.pScenario = new ScenarioElements();
		this.pStatement = new StatementElements();
		this.pVariableDef = new VariableDefElements();
		this.pAnnounce = new AnnounceElements();
		this.pQuestion = new QuestionElements();
		this.pEnd = new EndElements();
		this.pTarget = new TargetElements();
		this.pEndingTarget = new EndingTargetElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pExp = new ExpElements();
		this.pBoolean = new BooleanElements();
		this.pEqual = new EqualElements();
		this.pCompare = new CompareElements();
		this.pConcat = new ConcatElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pMultDiv = new MultDivElements();
		this.pPrimitive = new PrimitiveElements();
		this.pCrossRef = new CrossRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.exam22.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'story' name=ID functions+=Function* scenarios+=Scenario*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Function:
	//    'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' returnType=Type;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Scenario:
	//    'scenario' name=ID ('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')?
	//    '{' (variables+=VariableDef | statements+=Statement)* '}';
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Statement:
	//    Announce | Question | End;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableDef:
	//    'var' name=ID ':' type=Type;
	public VariableDefElements getVariableDefAccess() {
		return pVariableDef;
	}
	
	public ParserRule getVariableDefRule() {
		return getVariableDefAccess().getRule();
	}
	
	//Announce:
	//    'announce' name=ID expression=Exp targets+=Target+;
	public AnnounceElements getAnnounceAccess() {
		return pAnnounce;
	}
	
	public ParserRule getAnnounceRule() {
		return getAnnounceAccess().getRule();
	}
	
	//Question:
	//    'question' name=ID expression=Exp 'as' output=Exp ('in' variable=[VariableDef])? targets+=Target+;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//End:
	//    'end' name=ID expression=Exp?;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Target:
	//    'to' to=[CrossRef] ('('(expressions+=Exp (',' expressions+=Exp)*)?')')? ('if' condition=Exp)? ('{' endingTargets+=EndingTarget+ '}')?;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//EndingTarget:
	//    'on' end=[End] target=Target;
	public EndingTargetElements getEndingTargetAccess() {
		return pEndingTarget;
	}
	
	public ParserRule getEndingTargetRule() {
		return getEndingTargetAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=Type;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Type:
	//    'boolean' | 'text' | 'number';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Exp:
	//    Boolean;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Boolean returns Exp:
	//    Equal ({Boolean.left=current} op=('&&'|'||') right=Equal)*;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Equal returns Exp:
	//    Compare ({Equal.left=current} op=('=='|'!=') right=Compare)*;
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Compare returns Exp:
	//    Concat ({Compare.left=current} op=('<'|'>'|'<='|'>=') right=Concat)*;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Concat returns Exp:
	//    PlusMinus ({Concat.left=current} '&' right=PlusMinus)*;
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//PlusMinus returns Exp:
	//    MultDiv ({PlusMinus.left=current} op=('+'|'-') right=MultDiv)*;
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}
	
	//MultDiv returns Exp:
	//    Primitive ({MultDiv.left=current} op=('*'|'/') right=Primitive)*;
	public MultDivElements getMultDivAccess() {
		return pMultDiv;
	}
	
	public ParserRule getMultDivRule() {
		return getMultDivAccess().getRule();
	}
	
	//Primitive returns Exp:
	//    {IntConstant} value=INT |
	//    {StringConstant} value=STRING |
	//    {BoolConstant} value=('true' | 'false') |
	//    {Not} '!' exp=Primitive |
	//    {TypeConstant} type=Type |
	//    {This} 'this' |
	//    {VarRef} ref=[CrossRef] |
	//    {FuncCall} ref=[Function] '('(expressions+=Exp (',' expressions+=Exp)*)?')' |
	//    {Parenthesis} '(' exp=Exp ')';
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//CrossRef:
	//    Statement|Scenario|Function|Parameter|VariableDef;
	public CrossRefElements getCrossRefAccess() {
		return pCrossRef;
	}
	
	public ParserRule getCrossRefRule() {
		return getCrossRefAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
