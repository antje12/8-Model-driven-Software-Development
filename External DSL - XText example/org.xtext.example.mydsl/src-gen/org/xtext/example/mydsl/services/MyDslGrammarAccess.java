/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Assignment cRelationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationsRelationParserRuleCall_3_0 = (RuleCall)cRelationsAssignment_3.eContents().get(0);
		
		//System:
		//    'system' name=ID (entities+=Entity)* (relations+=Relation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID (entities+=Entity)* (relations+=Relation)*
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(entities+=Entity)*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_2_0() { return cEntitiesEntityParserRuleCall_2_0; }
		
		//(relations+=Relation)*
		public Assignment getRelationsAssignment_3() { return cRelationsAssignment_3; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_3_0() { return cRelationsRelationParserRuleCall_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributessAttributeParserRuleCall_2_0 = (RuleCall)cAttributessAssignment_2.eContents().get(0);
		
		//Entity:
		//    'entity' name=ID (attributess+=Attribute)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID (attributess+=Attribute)*
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(attributess+=Attribute)*
		public Assignment getAttributessAssignment_2() { return cAttributessAssignment_2; }
		
		//Attribute
		public RuleCall getAttributessAttributeParserRuleCall_2_0() { return cAttributessAttributeParserRuleCall_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Attribute:
		//    'attribute' name=ID 'as' Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID 'as' Type
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Type:
		//    'string' | 'number';
		@Override public ParserRule getRule() { return rule; }
		
		//'string' | 'number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'string'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRelationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFromAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFromIDTerminalRuleCall_0_1_0 = (RuleCall)cFromAssignment_0_1.eContents().get(0);
		private final Keyword cIsKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cToAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cToIDTerminalRuleCall_0_3_0 = (RuleCall)cToAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRelationKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cManyKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cFromAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFromIDTerminalRuleCall_1_2_0 = (RuleCall)cFromAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Keyword cHasKeyword_1_3_0 = (Keyword)cAlternatives_1_3.eContents().get(0);
		private final Keyword cHaveKeyword_1_3_1 = (Keyword)cAlternatives_1_3.eContents().get(1);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cAKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cManyKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cToAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cToIDTerminalRuleCall_1_5_0 = (RuleCall)cToAssignment_1_5.eContents().get(0);
		
		//Relation:
		//    'relation' from=ID 'is' to=ID |
		//    'relation' ('a'|'many')? from=ID ('has'|'have') ('a'|'many')? to=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' from=ID 'is' to=ID |
		//'relation' ('a'|'many')? from=ID ('has'|'have') ('a'|'many')? to=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'relation' from=ID 'is' to=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'relation'
		public Keyword getRelationKeyword_0_0() { return cRelationKeyword_0_0; }
		
		//from=ID
		public Assignment getFromAssignment_0_1() { return cFromAssignment_0_1; }
		
		//ID
		public RuleCall getFromIDTerminalRuleCall_0_1_0() { return cFromIDTerminalRuleCall_0_1_0; }
		
		//'is'
		public Keyword getIsKeyword_0_2() { return cIsKeyword_0_2; }
		
		//to=ID
		public Assignment getToAssignment_0_3() { return cToAssignment_0_3; }
		
		//ID
		public RuleCall getToIDTerminalRuleCall_0_3_0() { return cToIDTerminalRuleCall_0_3_0; }
		
		//'relation' ('a'|'many')? from=ID ('has'|'have') ('a'|'many')? to=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'relation'
		public Keyword getRelationKeyword_1_0() { return cRelationKeyword_1_0; }
		
		//('a'|'many')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'a'
		public Keyword getAKeyword_1_1_0() { return cAKeyword_1_1_0; }
		
		//'many'
		public Keyword getManyKeyword_1_1_1() { return cManyKeyword_1_1_1; }
		
		//from=ID
		public Assignment getFromAssignment_1_2() { return cFromAssignment_1_2; }
		
		//ID
		public RuleCall getFromIDTerminalRuleCall_1_2_0() { return cFromIDTerminalRuleCall_1_2_0; }
		
		//('has'|'have')
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//'has'
		public Keyword getHasKeyword_1_3_0() { return cHasKeyword_1_3_0; }
		
		//'have'
		public Keyword getHaveKeyword_1_3_1() { return cHaveKeyword_1_3_1; }
		
		//('a'|'many')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//'a'
		public Keyword getAKeyword_1_4_0() { return cAKeyword_1_4_0; }
		
		//'many'
		public Keyword getManyKeyword_1_4_1() { return cManyKeyword_1_4_1; }
		
		//to=ID
		public Assignment getToAssignment_1_5() { return cToAssignment_1_5; }
		
		//ID
		public RuleCall getToIDTerminalRuleCall_1_5_0() { return cToIDTerminalRuleCall_1_5_0; }
	}
	
	
	private final SystemElements pSystem;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final TypeElements pType;
	private final RelationElements pRelation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pType = new TypeElements();
		this.pRelation = new RelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//    'system' name=ID (entities+=Entity)* (relations+=Relation)*;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID (attributess+=Attribute)*;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//    'attribute' name=ID 'as' Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Type:
	//    'string' | 'number';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Relation:
	//    'relation' from=ID 'is' to=ID |
	//    'relation' ('a'|'many')? from=ID ('has'|'have') ('a'|'many')? to=ID;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
