/*
 * generated by Xtext
 */
package dk.sdu.mmmi.sse02.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import dk.sdu.mmmi.sse02.stateMachine3.StateMachine
import dk.sdu.mmmi.sse02.stateMachine3.Constant
import dk.sdu.mmmi.sse02.stateMachine3.Variable
import dk.sdu.mmmi.sse02.stateMachine3.State
import dk.sdu.mmmi.sse02.stateMachine3.Transition
import dk.sdu.mmmi.sse02.stateMachine3.SetVariable
import dk.sdu.mmmi.sse02.stateMachine3.ChangeVariable
import dk.sdu.mmmi.sse02.stateMachine3.Value
import dk.sdu.mmmi.sse02.stateMachine3.Condition
import dk.sdu.mmmi.sse02.stateMachine3.External
import dk.sdu.mmmi.sse02.stateMachine3.ExternalCall

class StateMachine3Generator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider nameProvider 
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.getAllContents.toIterable.filter(typeof(StateMachine))) {
			fsa.generateFile(e.getFullyQualifiedName.toString.replace(".", "/") + ".java",e.compile)
		}
	}
	
	def packageName(StateMachine m) {
		m.getFullyQualifiedName.skipLast(1).toString		
	}

	def className(StateMachine m) {
		m.getFullyQualifiedName.getLastSegment.toString
	}
 
 	def compile(StateMachine m) '''
«val hasExternals = m.externals.size>0»
package «packageName(m)»;

import java.util.ArrayList;
import java.util.List;

import statemachine.year2.framework.Machine;
import statemachine.year2.framework.State;
import statemachine.year2.framework.Transition;

public class «className(m)» extends Machine {

	«IF hasExternals»
	// External functions
	interface Requires {
	«FOR e:m.externals»
	«e.compile»
	«ENDFOR»
	}
	«ENDIF»

    // Constants
    «FOR c: m.constants»
    «c.compile»
    «ENDFOR»

    // States
    private State «FOR s: m.states»«s.name», «ENDFOR»__NONE__;
    
    // Extended state
    «FOR v: m.variables»
    «v.compile»
    «ENDFOR»
    
    // State machine definition
    public «className(m)»(«IF hasExternals»final Requires requiredExternalFunctions«ENDIF») {
    	«FOR s: m.states»
    	«s.compile»
    	«ENDFOR»
    }
    
    @Override
    protected List<State> getAllStates() {
		ArrayList<State> result = new ArrayList<State>();
		«FOR s: m.states»
		result.add(«s.name»);
		«ENDFOR»
        return result;
    }

}
	'''
	
	def compile(Constant c) '''
    private static final int «c.name» = «c.value»; //
	'''

	def compile(Variable v) '''
    private «v.type» «v.name»;
    public «v.type» get«v.name.toFirstUpper»() { return «v.name»; }
	'''

	private int counter
	def compile(External e) '''
			public void «e.name»(«IF e.types!=null»«FOR t:e.types SEPARATOR ','»«t» p«counter=counter+1»«ENDFOR»«ENDIF»);
	'''

	def compile(State s) '''
        «s.name» = new State(this,"«s.name»");
        «FOR t: s.transitions»
        «t.compile(s.name)»
        «ENDFOR»
	'''

	def compile(Transition t, String stateName) '''
        «stateName».addTransition("«t.event.name»", new Transition(«IF t.target==null»null«ELSE»"«t.target.name»"«ENDIF»)
        «IF t.actions!=null || t.condition!=null»
        {
        «IF t.actions!=null»
        @Override public void effect() { «FOR a:t.actions SEPARATOR ';'»«a.compile»«ENDFOR»; }
		«ENDIF»
		«IF t.condition!=null»
		@Override public boolean isApplicable() { «t.condition.compile»; } 
        «ENDIF»
		}
		«ENDIF»
		);
	'''

	def dispatch compile(SetVariable a) '''
	«a.variable.name» = «a.value.compile»
	'''

	def dispatch compile(ChangeVariable a) '''
	«a.variable.name» = «a.left.name» «a.operator» «a.right.compile»
	'''

	def dispatch compile(ExternalCall c) '''
	requiredExternalFunctions.«c.function.name»(«FOR v:c.arguments SEPARATOR ','»«v.name»«ENDFOR»)
	'''

	def compile(Value v) '''
	«IF v.constant==null»«v.number»«ELSE»«v.constant.name»«ENDIF»
	'''
	
	def compile(Condition c) '''
	return «c.variable.name» «convertOperator(c.operator)» «c.value.compile»
	'''
	
	def convertOperator(String op) {
		if(op.equals("=")) "==" else op;
	}

}
