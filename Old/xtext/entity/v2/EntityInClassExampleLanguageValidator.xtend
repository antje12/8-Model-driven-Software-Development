/*
 * generated by Xtext 2.12.0
 */
package dk.sdu.mmmi.mdsd.validation

import org.eclipse.xtext.validation.Check
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.Relation
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.NamedMember
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.EntityInClassExampleLanguagePackage.Literals
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.Entity
import java.util.HashSet
import java.util.Set

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EntityInClassExampleLanguageValidator extends AbstractEntityInClassExampleLanguageValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					EntityInClassExampleLanguagePackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	@Check
	def checkValidInverseName(Relation relation) {
		if(relation.inverse_name!==null) {
			var entity = relation.typeName
			while(entity!==null) {
				entity.members.filter(NamedMember).forEach[
					if(it.name.equals(relation.inverse_name)) {
						error('Inverse name overrides local name',
							Literals.RELATION__INVERSE_NAME,
							'invalidInverseName'
						)
					}
				]
				entity = entity.zuper
			}
		}
	}
	
	@Check
	def checkEntityNoCyclicExtends(Entity entity) {
		val seen = new HashSet<String>
		seen.add(entity.name)
		if(entity.zuper.selfExtends(seen)) {
			error('Cyclic extends relation',Literals.ENTITY__ZUPER,"cyclicInheritance")
		}
	}
	
	def boolean selfExtends(Entity next, Set<String> seen) {
		if(next===null) false
		else if(seen.contains(next.name)) true
		else { seen.add(next.name) next.zuper.selfExtends(seen) }
	}
	
}
