/*
 * generated by Xtext 2.12.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.Name
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.EntityInClassExampleLanguagePackage.Literals
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.Entity
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.common.util.EList
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.Attribute
import java.util.ArrayList
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.NamedMember
import dk.sdu.mmmi.mdsd.entityInClassExampleLanguage.Sum
import java.util.HashSet

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class EntityInClassExampleLanguageScopeProvider extends AbstractEntityInClassExampleLanguageScopeProvider {

	override getScope(EObject context, EReference reference) {
		// Use of attribute or relation names in expressions
		if(context instanceof Name && reference==Literals.NAME__VAR_NAME) {
			val seen = new HashSet<Entity>
			var entity = EcoreUtil2.getContainerOfType(context,Entity)
			val candidates = new ArrayList<NamedMember>
			while(entity!==null) {
				if(seen.contains(entity)) return super.getScope(context, reference) // scope undefined
				seen.add(entity)
				candidates.addAll(entity.members.filter(NamedMember))
				entity = entity.zuper
			}
			return Scopes.scopeFor(candidates)
		}
		// Use of attribute names in sum expressions
		if(context instanceof Sum && reference==Literals.SUM__SELECTOR) {
			val seen = new HashSet<Entity>
			var entity = (context as Sum).field.typeName
			val candidates = new ArrayList<Attribute>
			while(entity!==null) {
				if(seen.contains(entity)) return super.getScope(context, reference) // scope undefined
				candidates.addAll(entity.members.filter(Attribute))
				entity = entity.zuper
			}
			return Scopes.scopeFor(candidates)
			
		}
		return super.getScope(context, reference)
	}

}
