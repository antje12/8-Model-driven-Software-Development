/*
 * generated by Xtext 2.22.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.TextGen
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.TextExp
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.ThenExp
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.OrExp
import java.util.Random
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.TextString
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.TextRepeat
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.TextParen
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MiniTextGeneratorLanguageGenerator extends AbstractGenerator {

	val r = new Random

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val tg = resource.allContents.filter(TextGen).next
		System::out.println("Model:")
		tg.display
		System::out.println("Generates: "+tg.generate)
	}
	
	def static String generateString(TextGen gen) {
		(new MiniTextGeneratorLanguageGenerator).generate(gen)
	}
	
	def String generate(TextGen gen) {
		gen.exp.generateExp
	}
		
	def dispatch String generateExp(TextExp exp) { exp.exp1.generateExp }
	def dispatch String generateExp(TextString exp) { exp.str }
	def dispatch String generateExp(ThenExp exp) { exp.exp1.generateExp+" "+exp.exp2.generateExp }
	def dispatch String generateExp(OrExp exp) { 
		if(r.nextBoolean)
			exp.exp1.generateExp
		else
			exp.exp2.generateExp
	}
	def dispatch String generateExp(TextRepeat exp) {
		val res = new StringBuffer
		for(var i=0; i<exp.num; i++) {
			res.append(exp.exp.generateExp)
		}
		res.toString
	}
	def dispatch String generateExp(TextParen exp) { exp.exp.generateExp }
	
	def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
		
}
