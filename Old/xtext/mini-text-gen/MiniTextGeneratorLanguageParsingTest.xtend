/*
 * generated by Xtext 2.22.0
 */
package dk.sdu.mmmi.mdsd.tests

import com.google.inject.Inject
import dk.sdu.mmmi.mdsd.miniTextGeneratorLanguage.TextGen
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import static extension dk.sdu.mmmi.mdsd.generator.MiniTextGeneratorLanguageGenerator.generateString


@ExtendWith(InjectionExtension)
@InjectWith(MiniTextGeneratorLanguageInjectorProvider)
class MiniTextGeneratorLanguageParsingTest {
	@Inject
	ParseHelper<TextGen> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			generate "Hello"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void test_hello() {
		val result = parseHelper.parse('''generate "Hello"''')
	    val generated = result.generateString
	    Assertions.assertNotNull(generated)
	    Assertions.assertTrue(generated.equals("Hello"))
	}

	@Test
	def void test_then() {
		val result = parseHelper.parse('''generate "Hello" then "world"''')
	    val generated = result.generateString
	    Assertions.assertNotNull(generated)
	    Assertions.assertTrue(generated.equals("Hello world"))
	}
}
