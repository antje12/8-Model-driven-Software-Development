/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.External;
import dk.sdu.mmmi.mdsd.math.Function;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/math_expression/");
    String _firstUpper = StringExtensions.toFirstUpper(math.getName());
    _builder.append(_firstUpper);
    _builder.append(".java");
    fsa.generateFile(_builder.toString(), this.generateJavaString(math));
  }

  public CharSequence generateJavaString(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = math.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<VarBinding> _variables = math.getVariables();
      for(final VarBinding variable : _variables) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name_1 = variable.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty = math.getExternals().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private External external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_2 = math.getName();
        _builder.append(_name_2, "\t");
        _builder.append("(External external) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      EList<VarBinding> _variables_1 = math.getVariables();
      for(final VarBinding variable_1 : _variables_1) {
        _builder.append("\t\t");
        _builder.append("this.");
        String _name_3 = variable_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(" = ");
        HashMap<String, CharSequence> _hashMap = new HashMap<String, CharSequence>();
        CharSequence _computeExpression = MathGenerator.computeExpression(variable_1, _hashMap);
        _builder.append(_computeExpression, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _isEmpty_1 = math.getExternals().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public interface External {");
        _builder.newLine();
        {
          EList<External> _externals = math.getExternals();
          for(final External external : _externals) {
            _builder.append("\t");
            _builder.append("\t");
            int i = 0;
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("public int ");
            String _name_4 = external.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("(");
            {
              EList<String> _types = external.getTypes();
              boolean _hasElements = false;
              for(final String type : _types) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(",", "\t\t");
                }
                _builder.append(type, "\t\t");
                _builder.append(" n");
                int _plusPlus = i++;
                _builder.append(_plusPlus, "\t\t");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected static CharSequence _computeExpression(final Function function, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.external.");
    String _name = function.getFunction().getName();
    _builder.append(_name);
    _builder.append("(");
    {
      EList<Expression> _variables = function.getVariables();
      boolean _hasElements = false;
      for(final Expression variable : _variables) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        CharSequence _computeExpression = MathGenerator.computeExpression(variable, local);
        _builder.append(_computeExpression);
      }
    }
    _builder.append(")");
    return _builder;
  }

  protected static CharSequence _computeExpression(final VarBinding binding, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _computeExpression = MathGenerator.computeExpression(binding.getExpression(), local);
    _builder.append(_computeExpression);
    return _builder;
  }

  protected static CharSequence _computeExpression(final MathNumber exp, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = exp.getValue();
    _builder.append(_value);
    return _builder;
  }

  protected static CharSequence _computeExpression(final Parenthesis exp, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _computeExpression = MathGenerator.computeExpression(exp.getContent(), local);
    _builder.append(_computeExpression);
    _builder.append(")");
    return _builder;
  }

  protected static CharSequence _computeExpression(final Plus exp, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _computeExpression = MathGenerator.computeExpression(exp.getLeft(), local);
    _builder.append(_computeExpression);
    _builder.append(" + ");
    CharSequence _computeExpression_1 = MathGenerator.computeExpression(exp.getRight(), local);
    _builder.append(_computeExpression_1);
    return _builder;
  }

  protected static CharSequence _computeExpression(final Minus exp, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _computeExpression = MathGenerator.computeExpression(exp.getLeft(), local);
    _builder.append(_computeExpression);
    _builder.append(" - ");
    CharSequence _computeExpression_1 = MathGenerator.computeExpression(exp.getRight(), local);
    _builder.append(_computeExpression_1);
    return _builder;
  }

  protected static CharSequence _computeExpression(final Mult exp, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _computeExpression = MathGenerator.computeExpression(exp.getLeft(), local);
    _builder.append(_computeExpression);
    _builder.append(" * ");
    CharSequence _computeExpression_1 = MathGenerator.computeExpression(exp.getRight(), local);
    _builder.append(_computeExpression_1);
    return _builder;
  }

  protected static CharSequence _computeExpression(final Div exp, final Map<String, CharSequence> local) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _computeExpression = MathGenerator.computeExpression(exp.getLeft(), local);
    _builder.append(_computeExpression);
    _builder.append(" / ");
    CharSequence _computeExpression_1 = MathGenerator.computeExpression(exp.getRight(), local);
    _builder.append(_computeExpression_1);
    return _builder;
  }

  protected static CharSequence _computeExpression(final LetBinding exp, final Map<String, CharSequence> local) {
    CharSequence _xblockexpression = null;
    {
      HashMap<String, CharSequence> layer = new HashMap<String, CharSequence>(local);
      layer.put(exp.getName(), MathGenerator.computeExpression(exp.getBinding(), local));
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _computeExpression = MathGenerator.computeExpression(exp.getBody(), layer);
      _builder.append(_computeExpression);
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  protected static CharSequence _computeExpression(final VariableUse exp, final Map<String, CharSequence> local) {
    CharSequence _xifexpression = null;
    boolean _containsKey = local.containsKey(exp.getRef().getName());
    if (_containsKey) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(");
      CharSequence _get = local.get(exp.getRef().getName());
      _builder.append(_get);
      _builder.append(")");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      String _name = exp.getRef().getName();
      _builder_1.append(_name);
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }

  public static CharSequence computeExpression(final EObject exp, final Map<String, CharSequence> local) {
    if (exp instanceof Div) {
      return _computeExpression((Div)exp, local);
    } else if (exp instanceof Function) {
      return _computeExpression((Function)exp, local);
    } else if (exp instanceof LetBinding) {
      return _computeExpression((LetBinding)exp, local);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp, local);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp, local);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp, local);
    } else if (exp instanceof Parenthesis) {
      return _computeExpression((Parenthesis)exp, local);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp, local);
    } else if (exp instanceof VarBinding) {
      return _computeExpression((VarBinding)exp, local);
    } else if (exp instanceof VariableUse) {
      return _computeExpression((VariableUse)exp, local);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp, local).toString());
    }
  }
}
